package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSMPLException;
import smpl.values.SMPLValue;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxSMPLException(msg, ioe);
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal SEMI, COLON, COMMA, DOT;


// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POW;

//bitwise operators
terminal BITAND, BITOR, COMP;

//Relational Operators
terminal EQ, GT, LT, GE, LE, NEQ;

//Logical operators
terminal AND, OR, NOT;

terminal CONCAT;

//keywords
terminal PROC, CALL, LAZY;
terminal DEF, ASSIGN;
terminal LET;
terminal IF, THEN, ELSE, CASE;
terminal QUERY;
terminal PAIR, CAR, CDR, LIST, SIZE;
terminal EQV, EQL;
terminal SUBSTRING;

terminal PRINT, PRINTLN, READ, READINT;

terminal NIL;

// terminals with values
terminal Integer INTEGER;
terminal Double REAL;
terminal String VARIABLE;
terminal Character CHAR;
terminal String STRING;
terminal Boolean BOOLEAN;

/* Non terminals */
non terminal SMPLProgram program;
non terminal StmtSequence stmtList;

non terminal Statement stmt;
non terminal StmtDefinition definition;

non terminal StmtLet letExp;
non terminal ArrayList<Binding> bindings;
non terminal ArrayList<Binding> bindingsAux;
non terminal Binding binding;

non terminal Exp expression;  

non terminal Exp makeLit;

non terminal Exp concatenation;

non terminal Exp builtInFn;
non terminal Exp makeCompound;
non terminal ArrayList<Exp> expList;
non terminal ArrayList<Exp> expListAux;
non terminal Specification specification;
non terminal ArrayList<Specification> specList;
non terminal ArrayList<Specification> specListAux;

non terminal Exp lazyExp;

non terminal ExpProcedure procedureDef;
non terminal ArrayList<String> params;
non terminal ArrayList<String> paramsAux;

non terminal ExpApplyProc procedureApp;
non terminal ArrayList<Exp> args;
non terminal ArrayList<Exp> argsAux;

non terminal Exp callExp;

non terminal Exp ifExp;

non terminal Exp multiExp;
non terminal ArrayList<Exp> exps;

non terminal Exp caseExp;
non terminal Case case;
non terminal ArrayList<Case> cases;
non terminal ArrayList<Case> casesAux;

non terminal Exp logicExp;
non terminal Exp comparison;
non terminal Exp bitExp;
non terminal Exp arithExp;
non terminal Exp term;
non terminal Exp comp;
non terminal Exp factor;
non terminal SMPLValue<?> number;

non terminal Statement printStmt;
non terminal Exp readExp;

non terminal empty;

precedence left LPAREN,RPAREN,ELSE,LBRACK,CONCAT,COLON;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new SMPLProgram(s); :};

stmtList ::=  stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

stmt ::= definition:d {: RESULT = d; :} |
         expression:e SEMI {: RESULT = e; :} |
         printStmt:p {: RESULT = p; :};

definition ::= VARIABLE:v ASSIGN expression:e SEMI {:
                RESULT = new StmtDefinition(v,e);
            :} |
            DEF VARIABLE:v expression:e SEMI{:
                RESULT = new StmtDefinition(v,e);
            :};

expression ::=  letExp:l {: RESULT = l; :} |
                LBRACE expression:e RBRACE {: RESULT = e; :} |
                logicExp:lx {: RESULT = lx; :} |
                callExp:c {: RESULT = c; :} |
                ifExp:i {: RESULT = i; :} |
                multiExp:m {: RESULT = m; :} |
                caseExp:c {: RESULT = c; :} |
                makeLit:m {: RESULT = m; :} |
                concatenation: cn {: RESULT = cn; :} |
                builtInFn:b {:  RESULT = b; :} |
                readExp:r {: RESULT = r; :};

multiExp ::= LPAREN expression:e exps:el RPAREN{:
                el.add(0,e);
                RESULT = new ExpMult(el);
            :};

exps ::=  COMMA expression:e exps:el{:
                el.add(0,e);
                RESULT = el;
            :} |
            empty{: new ArrayList(); :};

caseExp ::= CASE LBRACE cases:c RBRACE {: RESULT = new ExpCase(c); :};

case ::= expression:a COLON expression:b {: RESULT = new Case(a,b); :};

cases ::= case:c casesAux:cl {:
            cl.add(0,c);
            RESULT = cl;
        :} |
        empty {: RESULT = new ArrayList(); :};

casesAux ::= COMMA case:c casesAux:cl{:
            cl.add(0,c);
            RESULT = cl;
        :} |
        empty {: RESULT = new ArrayList(); :};

letExp ::= LET LPAREN bindings:bs RPAREN expression:body {:
			RESULT = new StmtLet(bs, body);
           :};  

binding ::= VARIABLE:v EQ expression:e {:
		RESULT = new Binding(v, e);
	    :};

bindings ::= binding:b bindingsAux:bl {:
		bl.add(0,b);
		RESULT = bl;
	     :} |
		empty {: RESULT = new ArrayList(); :};

bindingsAux ::= COMMA binding:b bindingsAux:bl {:
		  bl.add(0,b);
		  RESULT = bl;
		:} |
		empty {: RESULT = new ArrayList(); :};
               
procedureDef ::= PROC LPAREN params:p RPAREN expression:e{:
                    RESULT = new ExpProcedure(p,e);
                :} |
                PROC VARIABLE:v expression:e {:
                    RESULT = new ExpProcedure(v,e); 
                :} |
                PROC LPAREN params:p DOT VARIABLE:v RPAREN expression:e {:
                    RESULT = new ExpProcedure(p,v,e); :};

params ::= VARIABLE:v paramsAux:pl {:
                    pl.add(v);
                    RESULT = pl;
                :} |
                empty {: RESULT = new ArrayList(); :};

paramsAux ::= COMMA VARIABLE:v paramsAux:pl {:
                    pl.add(v);
                    RESULT = pl;
                :} |
                empty {: RESULT = new ArrayList(); :};

procedureApp ::= VARIABLE:v LPAREN args:ar RPAREN {:                    
                    RESULT =  new ExpApplyProc(v,ar); 
                :} |
                LPAREN procedureDef:pd RPAREN LPAREN args:ar RPAREN{:
                    RESULT = new ExpApplyProc(pd,ar);
		:} |
                procedureApp:pa LPAREN args:ar RPAREN{: 
                    RESULT = new ExpApplyProc(pa,ar);
                :};

args ::= expression:e argsAux:al {:
                    al.add(e);
                    RESULT = al;
                :} |
                empty {: RESULT = new ArrayList(); :};

argsAux ::= COMMA expression:e argsAux:al {:
                    al.add(e);
                    RESULT = al;
                :} |
                empty {: RESULT = new ArrayList(); :};

callExp ::= CALL LPAREN expression:a COMMA expression:b RPAREN {:
                    RESULT = new ExpCall(a,b);
                :};

ifExp ::= IF expression:i THEN expression:t{: RESULT = new ExpIf(i,t); :} |
          IF expression:i THEN expression:t ELSE expression:e {: RESULT = new ExpIf(i,t,e); :};

lazyExp ::= LAZY LPAREN expression:e RPAREN {: RESULT = new ExpLazy(e); :};

logicExp ::=  NOT comparison:c {:  RESULT = new ExpNot(c); :} |
              logicExp:e AND comparison:c {: RESULT = new ExpAnd(e,c); :} |
              logicExp:e OR arithExp:c {:  RESULT = new ExpOr(e,c); :} |
              comparison:c {: RESULT = c; :};

comparison ::= comparison:c EQ bitExp:b {: new ExpEQ(c,b); :} |
               comparison:c GT bitExp:b {: new ExpGT(c,b); :} |
               comparison:c LT bitExp:b {: new ExpLT(c,b); :} |
               comparison:c GE bitExp:b {: new ExpGE(c,b); :} |
               comparison:c LE bitExp:b {: new ExpLE(c,b); :} |
               comparison:c NEQ bitExp:b {: new ExpNEQ(c,b); :} |
               bitExp:b {: RESULT = b; :};

bitExp ::= bitExp:b BITAND arithExp:a {:  RESULT = new ExpBitAnd(b,a); :} |
           bitExp:b BITOR arithExp:a {:  RESULT = new ExpBitOr(b,a); :} |
           arithExp:a{: RESULT = a; :};

arithExp ::= 	arithExp:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		arithExp:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} |
		term:t {: RESULT = t; :};

term ::= term:t MUL comp:c {:
		RESULT = new ExpMul(t, c); :} |
	 term:t DIV comp:c {:
		RESULT = new ExpDiv(t, c); :} |
	 term:t MOD comp:c {:
		RESULT = new ExpMod(t, c); :} |
         term:t POW comp:c {: 
                RESULT = new ExpPow(t, c); :} |
	 comp:c {: RESULT = c; :};

comp ::= COMP factor:f {::} |
         factor:f{: RESULT = f; :};

number ::= INTEGER:ilit {: RESULT = SMPLValue.make(ilit); :}|
           REAL:ilit {: RESULT =  SMPLValue.make(ilit); :};

factor ::= number:n {: RESULT = new ExpLit(n); :} |
	   VARIABLE:var {: RESULT = new ExpVar(var); :} |
	   LPAREN expression:e RPAREN {: RESULT = e; :}	|
           procedureApp:a {: RESULT = a; :};

makeLit ::= STRING:s {: RESULT = new ExpLit(s); :} |
            CHAR: c {: RESULT = new ExpLit(c); :} |
            NIL {: RESULT = new ExpLit(); :} |
            BOOLEAN:b {: RESULT = new ExpLit(b); :} ;

concatenation ::= expression:a CONCAT expression:b {: new ExpConcat(a,b); :};

builtInFn ::= CAR LPAREN expression:e LPAREN {: RESULT = new ExpCar(e); :} |
              CDR LPAREN expression:e LPAREN {: RESULT = new ExpCdr(e); :} |
              PAIR QUERY LPAREN expression:e LPAREN {: RESULT = new ExpIsPair(e); :} |
              EQV QUERY LPAREN expression:a COMMA expression:b RPAREN {: RESULT = new ExpIsEqv(a,b); :} |
              EQL QUERY LPAREN expression:a COMMA expression:b RPAREN {: RESULT = new ExpIsEql(a,b); :} |
              expression:e LBRACK expression:n RBRACK {: RESULT = new ExpGet(e,n); :} |
              SIZE LPAREN expression:e RPAREN {: RESULT = new ExpSize(e); :} |
              SUBSTRING LPAREN expression:a COMMA expression:b COMMA expression:c RPAREN {:
                RESULT = new ExpSubstr(a,b,c); :} |
              makeCompound: m {: RESULT = m; :};

makeCompound ::= PAIR  LPAREN expression:a COMMA expression:b RPAREN {: RESULT = new ExpPair(a,b); :} |
                 LIST LPAREN expList:l RPAREN {: RESULT = new ExpList(l); :} |
                 LBRACK expList:l RBRACK {: RESULT = new ExpList(l); :} |
                 LBRACK COLON specList:l COLON RBRACK {: RESULT = new ExpVector(l); :};

expList ::= expression:e expListAux:el{:
                el.add(0,e);
                RESULT = el; :} |
            empty {: RESULT = new ArrayList(); :};

expListAux ::= COMMA expression:e expListAux:el{:
                el.add(0,e);
                RESULT = el; :} |
            empty {: RESULT = new ArrayList(); :};

specification ::= expression:n COLON expression:f {: RESULT = new Specification(n,f); :} |
                  expression: e {: RESULT = new Specification(e); :};

specList ::= specification:s specListAux:sl{:
                sl.add(0,s);
                RESULT = sl; :} |
            empty {: RESULT = new ArrayList(); :};

specListAux ::= COMMA specification:s specListAux:sl{:
                sl.add(0,s);
                RESULT = sl; :} |
            empty {: RESULT = new ArrayList(); :};


printStmt ::= PRINT LPAREN expression:e RPAREN SEMI {:
                RESULT = new StmtPrint(e);
              :} |
              PRINTLN LPAREN expression:e RPAREN SEMI {:
                RESULT = new StmtPrint(e,true);
              :};

readExp ::= READ LPAREN RPAREN {: RESULT = new ExpRead(); :} |
            READINT LPAREN RPAREN {: RESULT = new ExpRead(true); :};

empty ::= ;