
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSMPLException;
import smpl.values.SMPLValue;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\012\003\000\002\012\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\035\006\000\002\036\005\000\002\036\003\000" +
    "\002\037\006\000\002\040\005\000\002\041\004\000\002" +
    "\041\003\000\002\042\005\000\002\042\003\000\002\006" +
    "\007\000\002\011\005\000\002\007\004\000\002\007\003" +
    "\000\002\010\005\000\002\010\003\000\002\025\007\000" +
    "\002\025\005\000\002\025\011\000\002\026\004\000\002" +
    "\026\003\000\002\027\005\000\002\027\003\000\002\030" +
    "\006\000\002\030\010\000\002\030\006\000\002\031\004" +
    "\000\002\031\003\000\002\032\005\000\002\032\003\000" +
    "\002\033\010\000\002\034\006\000\002\034\010\000\002" +
    "\024\006\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\003\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\003\000\002\045\005\000\002" +
    "\045\005\000\002\045\003\000\002\046\005\000\002\046" +
    "\005\000\002\046\003\000\002\047\005\000\002\047\005" +
    "\000\002\047\005\000\002\047\005\000\002\047\003\000" +
    "\002\050\004\000\002\050\003\000\002\052\003\000\002" +
    "\052\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\005\000\002\051\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\005\000" +
    "\002\015\006\000\002\015\006\000\002\015\007\000\002" +
    "\015\011\000\002\015\011\000\002\015\006\000\002\015" +
    "\006\000\002\015\012\000\002\015\003\000\002\016\010" +
    "\000\002\016\006\000\002\016\005\000\002\016\007\000" +
    "\002\017\004\000\002\017\003\000\002\020\005\000\002" +
    "\020\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\004\000\002\022\003\000\002\023\005\000\002\023\003" +
    "\000\002\053\007\000\002\053\007\000\002\054\005\000" +
    "\002\054\005\000\002\055\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\066\004\017\006\040\010\044\027\025\043" +
    "\023\045\056\047\053\050\027\053\013\055\037\056\014" +
    "\057\016\060\050\061\033\062\042\063\051\064\005\065" +
    "\063\066\020\071\022\072\015\073\041\074\045\075\010" +
    "\076\055\077\032\001\002\000\004\002\u0101\001\002\000" +
    "\004\004\372\001\002\000\154\002\uffb8\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\043\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\071\uffb8\072\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\001\002\000\070" +
    "\002\001\004\017\006\040\010\044\027\025\043\023\045" +
    "\056\047\053\050\027\053\013\055\037\056\014\057\016" +
    "\060\050\061\033\062\042\063\051\064\005\065\063\066" +
    "\020\071\022\072\015\073\041\074\045\075\010\076\055" +
    "\077\032\001\002\000\112\002\uffae\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\027\uffae\041\uffae\043\uffae\045\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\055\uffae\056\uffae\057\uffae\060\uffae" +
    "\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\071" +
    "\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae" +
    "\001\002\000\140\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\025\153" +
    "\026\154\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3" +
    "\045\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\071\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\001\002\000\070\002\ufffd" +
    "\004\ufffd\006\ufffd\010\ufffd\027\ufffd\043\ufffd\045\ufffd\047" +
    "\ufffd\050\ufffd\053\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd" +
    "\001\002\000\004\010\354\001\002\000\004\004\351\001" +
    "\002\000\154\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\043\uffb5\045\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075" +
    "\uffb5\076\uffb5\077\uffb5\001\002\000\004\004\346\001\002" +
    "\000\062\004\017\006\040\010\044\027\025\042\124\043" +
    "\023\047\053\050\027\053\013\055\037\056\014\057\016" +
    "\060\050\061\033\062\042\063\051\064\005\071\022\072" +
    "\015\073\041\074\070\075\010\076\055\077\032\001\002" +
    "\000\004\004\333\001\002\000\112\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\027\ufff1\041\ufff1\043\ufff1\045\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1" +
    "\077\ufff1\001\002\000\112\002\uffad\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\027\uffad\041\uffad\043\uffad\045\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\071" +
    "\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\001\002\000\004\004\326\001\002\000\112\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\027\ufff8\041\ufff8\043\ufff8\045\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8" +
    "\076\ufff8\077\ufff8\001\002\000\012\004\121\072\015\073" +
    "\041\074\070\001\002\000\112\002\uffef\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\027\uffef\041\uffef\043\uffef\045\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\055\uffef\056\uffef\057\uffef\060" +
    "\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef" +
    "\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077" +
    "\uffef\001\002\000\060\004\017\006\040\010\044\027\025" +
    "\043\023\047\053\050\027\053\013\055\037\056\014\057" +
    "\016\060\050\061\033\062\042\063\051\064\005\071\022" +
    "\072\015\073\041\074\070\075\010\076\055\077\032\001" +
    "\002\000\120\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\027\ufff6\036" +
    "\313\037\314\040\312\041\ufff6\043\ufff6\045\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076" +
    "\ufff6\077\ufff6\001\002\000\010\006\101\012\311\041\100" +
    "\001\002\000\112\002\uffac\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\027\uffac" +
    "\041\uffac\043\uffac\045\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\071\uffac\072" +
    "\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\001\002" +
    "\000\004\004\306\001\002\000\112\002\uffa2\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\027\uffa2\041\uffa2\043\uffa2\045\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2" +
    "\077\uffa2\001\002\000\154\002\uffbd\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\017\uffbd\020\uffbd\021\163\022\164\023\161\024\162\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043" +
    "\uffbd\045\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\071\uffbd\072\uffbd\073\uffbd" +
    "\074\uffbd\075\uffbd\076\uffbd\077\uffbd\001\002\000\112\002" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\027\ufff3\041\ufff3\043\ufff3\045" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3" +
    "\075\ufff3\076\ufff3\077\ufff3\001\002\000\006\004\276\054" +
    "\275\001\002\000\064\004\017\006\040\007\uff8f\010\044" +
    "\013\255\027\025\043\023\047\053\050\027\053\013\055" +
    "\037\056\014\057\016\060\050\061\033\062\042\063\051" +
    "\064\005\071\022\072\015\073\041\074\070\075\010\076" +
    "\055\077\032\001\002\000\154\002\uffb4\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\043\uffb4\045\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\066\uffb4\071\uffb4\072\uffb4\073" +
    "\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\001\002\000\004" +
    "\054\247\001\002\000\144\002\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\017\156\020\157\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\043\uffc0\045\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\071" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0" +
    "\001\002\000\060\004\017\006\040\010\044\027\025\043" +
    "\023\047\053\050\027\053\013\055\037\056\014\057\016" +
    "\060\050\061\033\062\042\063\051\064\005\071\022\072" +
    "\015\073\041\074\070\075\010\076\055\077\032\001\002" +
    "\000\056\004\071\006\uffb2\012\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\046\243\001\002\000\112\002\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\027\ufff0\041\ufff0\043\ufff0\045\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075" +
    "\ufff0\076\ufff0\077\ufff0\001\002\000\112\002\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\027\ufff5\041\ufff5\043\ufff5\045\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\077\ufff5\001\002\000\004\004\231\001\002\000\004" +
    "\054\223\001\002\000\070\002\ufffb\004\ufffb\006\ufffb\010" +
    "\ufffb\027\ufffb\043\ufffb\045\ufffb\047\ufffb\050\ufffb\053\ufffb" +
    "\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\071\ufffb\072\ufffb\073\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\077\ufffb\001\002\000\004\004" +
    "\205\001\002\000\112\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\027" +
    "\ufff4\041\ufff4\043\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\071\ufff4" +
    "\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\001" +
    "\002\000\112\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\027\uffaf\041" +
    "\uffaf\043\uffaf\045\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\001\002\000" +
    "\004\074\203\001\002\000\154\002\uffb6\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\043\uffb6\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\071\uffb6\072\uffb6\073" +
    "\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\001\002\000\154" +
    "\002\uffb0\004\200\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\043\uffb0\045\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\001\002\000\134\002\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\027\uffca\030\113\031\114\032\112\033\116\034\115\035" +
    "\117\036\uffca\037\uffca\040\uffca\041\uffca\043\uffca\045\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca" +
    "\065\uffca\066\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075" +
    "\uffca\076\uffca\077\uffca\001\002\000\112\002\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\027\ufff2\041\ufff2\043\ufff2\045\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076" +
    "\ufff2\077\ufff2\001\002\000\004\004\066\001\002\000\154" +
    "\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\043\uffb3\045\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\001\002\000\070\002\ufffe\004\ufffe\006\ufffe\010" +
    "\ufffe\027\ufffe\043\ufffe\045\ufffe\047\ufffe\050\ufffe\053\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\071\ufffe\072\ufffe\073\ufffe" +
    "\074\ufffe\075\ufffe\076\ufffe\077\ufffe\001\002\000\060\004" +
    "\017\006\040\010\044\027\025\043\023\047\053\050\027" +
    "\053\013\055\037\056\014\057\016\060\050\061\033\062" +
    "\042\063\051\064\005\071\022\072\015\073\041\074\070" +
    "\075\010\076\055\077\032\001\002\000\010\005\110\006" +
    "\101\041\100\001\002\000\154\002\uffb2\004\071\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\043\uffb2\045\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\001\002\000\062" +
    "\004\017\005\uff8f\006\040\010\044\027\025\043\023\047" +
    "\053\050\027\053\013\055\037\056\014\057\016\060\050" +
    "\061\033\062\042\063\051\064\005\071\022\072\015\073" +
    "\041\074\070\075\010\076\055\077\032\001\002\000\004" +
    "\005\uffd4\001\002\000\012\005\uff8f\006\101\014\076\041" +
    "\100\001\002\000\004\005\075\001\002\000\154\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\043\uffd8\045\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8" +
    "\001\002\000\060\004\017\006\040\010\044\027\025\043" +
    "\023\047\053\050\027\053\013\055\037\056\014\057\016" +
    "\060\050\061\033\062\042\063\051\064\005\071\022\072" +
    "\015\073\041\074\070\075\010\076\055\077\032\001\002" +
    "\000\004\005\uffd5\001\002\000\060\004\017\006\040\010" +
    "\044\027\025\043\023\047\053\050\027\053\013\055\037" +
    "\056\014\057\016\060\050\061\033\062\042\063\051\064" +
    "\005\071\022\072\015\073\041\074\070\075\010\076\055" +
    "\077\032\001\002\000\060\004\017\006\040\010\044\027" +
    "\025\043\023\047\053\050\027\053\013\055\037\056\014" +
    "\057\016\060\050\061\033\062\042\063\051\064\005\071" +
    "\022\072\015\073\041\074\070\075\010\076\055\077\032" +
    "\001\002\000\004\005\uffd2\001\002\000\010\006\101\007" +
    "\104\041\100\001\002\000\112\002\uffa5\004\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\027\uffa5\041\uffa5\043\uffa5\045\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077" +
    "\uffa5\001\002\000\112\002\uffab\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\027" +
    "\uffab\041\uffab\043\uffab\045\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\071\uffab" +
    "\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\001" +
    "\002\000\012\005\uff8f\006\101\014\076\041\100\001\002" +
    "\000\004\005\uffd3\001\002\000\004\012\111\001\002\000" +
    "\070\002\uff93\004\uff93\006\uff93\010\uff93\027\uff93\043\uff93" +
    "\045\uff93\047\uff93\050\uff93\053\uff93\055\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93" +
    "\066\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076" +
    "\uff93\077\uff93\001\002\000\014\004\121\027\025\072\015" +
    "\073\041\074\070\001\002\000\014\004\121\027\025\072" +
    "\015\073\041\074\070\001\002\000\014\004\121\027\025" +
    "\072\015\073\041\074\070\001\002\000\014\004\121\027" +
    "\025\072\015\073\041\074\070\001\002\000\014\004\121" +
    "\027\025\072\015\073\041\074\070\001\002\000\014\004" +
    "\121\027\025\072\015\073\041\074\070\001\002\000\140" +
    "\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\025\153\026\154\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\045\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076" +
    "\uffc4\077\uffc4\001\002\000\062\004\017\006\040\010\044" +
    "\027\025\042\124\043\023\047\053\050\027\053\013\055" +
    "\037\056\014\057\016\060\050\061\033\062\042\063\051" +
    "\064\005\071\022\072\015\073\041\074\070\075\010\076" +
    "\055\077\032\001\002\000\004\005\147\001\002\000\010" +
    "\005\146\006\101\041\100\001\002\000\006\004\125\074" +
    "\126\001\002\000\010\005\uff8f\015\uff8f\074\132\001\002" +
    "\000\060\004\017\006\040\010\044\027\025\043\023\047" +
    "\053\050\027\053\013\055\037\056\014\057\016\060\050" +
    "\061\033\062\042\063\051\064\005\071\022\072\015\073" +
    "\041\074\070\075\010\076\055\077\032\001\002\000\010" +
    "\005\uffde\006\101\041\100\001\002\000\006\005\uffdb\015" +
    "\uffdb\001\002\000\006\005\140\015\141\001\002\000\010" +
    "\005\uff8f\014\133\015\uff8f\001\002\000\004\074\136\001" +
    "\002\000\006\005\uffdc\015\uffdc\001\002\000\006\005\uffd9" +
    "\015\uffd9\001\002\000\010\005\uff8f\014\133\015\uff8f\001" +
    "\002\000\006\005\uffda\015\uffda\001\002\000\060\004\017" +
    "\006\040\010\044\027\025\043\023\047\053\050\027\053" +
    "\013\055\037\056\014\057\016\060\050\061\033\062\042" +
    "\063\051\064\005\071\022\072\015\073\041\074\070\075" +
    "\010\076\055\077\032\001\002\000\006\005\uff8f\074\132" +
    "\001\002\000\004\005\143\001\002\000\060\004\017\006" +
    "\040\010\044\027\025\043\023\047\053\050\027\053\013" +
    "\055\037\056\014\057\016\060\050\061\033\062\042\063" +
    "\051\064\005\071\022\072\015\073\041\074\070\075\010" +
    "\076\055\077\032\001\002\000\010\005\uffdd\006\101\041" +
    "\100\001\002\000\010\005\uffdf\006\101\041\100\001\002" +
    "\000\154\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\045\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1" +
    "\076\uffb1\077\uffb1\001\002\000\004\004\150\001\002\000" +
    "\062\004\017\005\uff8f\006\040\010\044\027\025\043\023" +
    "\047\053\050\027\053\013\055\037\056\014\057\016\060" +
    "\050\061\033\062\042\063\051\064\005\071\022\072\015" +
    "\073\041\074\070\075\010\076\055\077\032\001\002\000" +
    "\004\005\152\001\002\000\154\002\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\043\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\066\uffd7\071\uffd7\072\uffd7\073" +
    "\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\001\002\000\014" +
    "\004\121\027\025\072\015\073\041\074\070\001\002\000" +
    "\014\004\121\027\025\072\015\073\041\074\070\001\002" +
    "\000\144\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\017\156\020\157" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\043\uffc1\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\066\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\001\002\000\014" +
    "\004\121\027\025\072\015\073\041\074\070\001\002\000" +
    "\014\004\121\027\025\072\015\073\041\074\070\001\002" +
    "\000\154\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\017\uffbe\020\uffbe" +
    "\021\163\022\164\023\161\024\162\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe\045\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\001\002\000\014\004\121\027\025\072" +
    "\015\073\041\074\070\001\002\000\014\004\121\027\025" +
    "\072\015\073\041\074\070\001\002\000\014\004\121\027" +
    "\025\072\015\073\041\074\070\001\002\000\014\004\121" +
    "\027\025\072\015\073\041\074\070\001\002\000\154\002" +
    "\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\043\uffbb\045\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077" +
    "\uffbb\001\002\000\154\002\uffbc\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\043\uffbc" +
    "\045\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\001\002\000\154\002\uffb9" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\043\uffb9\045\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\001\002\000\154\002\uffba\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\043\uffba\045" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\071\uffba\072\uffba\073\uffba\074\uffba" +
    "\075\uffba\076\uffba\077\uffba\001\002\000\154\002\uffbf\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\017\uffbf\020\uffbf\021\163\022\164\023" +
    "\161\024\162\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\043\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\071\uffbf" +
    "\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\001" +
    "\002\000\144\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\017\156\020" +
    "\157\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\043\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\001\002\000" +
    "\140\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\025\153\026\154\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6" +
    "\076\uffc6\077\uffc6\001\002\000\140\002\uffc5\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\025\153\026\154\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\043\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\001\002" +
    "\000\140\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\025\153\026\154" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8\045\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075" +
    "\uffc8\076\uffc8\077\uffc8\001\002\000\140\002\uffc9\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\025\153\026\154\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\043\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\071\uffc9" +
    "\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\001" +
    "\002\000\140\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\025\153\026" +
    "\154\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\045" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\001\002\000\062\004\017\005" +
    "\uff8f\006\040\010\044\027\025\043\023\047\053\050\027" +
    "\053\013\055\037\056\014\057\016\060\050\061\033\062" +
    "\042\063\051\064\005\071\022\072\015\073\041\074\070" +
    "\075\010\076\055\077\032\001\002\000\004\005\202\001" +
    "\002\000\154\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\045\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075" +
    "\uffd6\076\uffd6\077\uffd6\001\002\000\060\004\017\006\040" +
    "\010\044\027\025\043\023\047\053\050\027\053\013\055" +
    "\037\056\014\057\016\060\050\061\033\062\042\063\051" +
    "\064\005\071\022\072\015\073\041\074\070\075\010\076" +
    "\055\077\032\001\002\000\072\002\ufff9\004\ufff9\006\101" +
    "\010\ufff9\027\ufff9\041\100\043\ufff9\045\ufff9\047\ufff9\050" +
    "\ufff9\053\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\071\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\001\002" +
    "\000\006\005\uff8f\074\211\001\002\000\004\005\uffe2\001" +
    "\002\000\006\005\uff8f\014\216\001\002\000\004\005\214" +
    "\001\002\000\004\030\212\001\002\000\060\004\017\006" +
    "\040\010\044\027\025\043\023\047\053\050\027\053\013" +
    "\055\037\056\014\057\016\060\050\061\033\062\042\063" +
    "\051\064\005\071\022\072\015\073\041\074\070\075\010" +
    "\076\055\077\032\001\002\000\012\005\uffe4\006\101\014" +
    "\uffe4\041\100\001\002\000\060\004\017\006\040\010\044" +
    "\027\025\043\023\047\053\050\027\053\013\055\037\056" +
    "\014\057\016\060\050\061\033\062\042\063\051\064\005" +
    "\071\022\072\015\073\041\074\070\075\010\076\055\077" +
    "\032\001\002\000\112\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\027" +
    "\uffe5\041\uffe5\043\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\001" +
    "\002\000\004\074\211\001\002\000\004\005\uffe0\001\002" +
    "\000\004\005\uffe3\001\002\000\006\005\uff8f\014\216\001" +
    "\002\000\004\005\uffe1\001\002\000\004\004\224\001\002" +
    "\000\060\004\017\006\040\010\044\027\025\043\023\047" +
    "\053\050\027\053\013\055\037\056\014\057\016\060\050" +
    "\061\033\062\042\063\051\064\005\071\022\072\015\073" +
    "\041\074\070\075\010\076\055\077\032\001\002\000\010" +
    "\006\101\014\226\041\100\001\002\000\060\004\017\006" +
    "\040\010\044\027\025\043\023\047\053\050\027\053\013" +
    "\055\037\056\014\057\016\060\050\061\033\062\042\063" +
    "\051\064\005\071\022\072\015\073\041\074\070\075\010" +
    "\076\055\077\032\001\002\000\010\005\230\006\101\041" +
    "\100\001\002\000\112\002\uffa6\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\027" +
    "\uffa6\041\uffa6\043\uffa6\045\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\071\uffa6" +
    "\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\001" +
    "\002\000\062\004\017\005\uff8f\006\040\010\044\027\025" +
    "\043\023\047\053\050\027\053\013\055\037\056\014\057" +
    "\016\060\050\061\033\062\042\063\051\064\005\071\022" +
    "\072\015\073\041\074\070\075\010\076\055\077\032\001" +
    "\002\000\006\005\uff9c\007\uff9c\001\002\000\014\005\uff8f" +
    "\006\101\007\uff8f\014\236\041\100\001\002\000\004\005" +
    "\235\001\002\000\112\002\uffa0\004\uffa0\005\uffa0\006\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\027" +
    "\uffa0\041\uffa0\043\uffa0\045\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\071\uffa0" +
    "\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\001" +
    "\002\000\060\004\017\006\040\010\044\027\025\043\023" +
    "\047\053\050\027\053\013\055\037\056\014\057\016\060" +
    "\050\061\033\062\042\063\051\064\005\071\022\072\015" +
    "\073\041\074\070\075\010\076\055\077\032\001\002\000" +
    "\006\005\uff9d\007\uff9d\001\002\000\006\005\uff9a\007\uff9a" +
    "\001\002\000\014\005\uff8f\006\101\007\uff8f\014\236\041" +
    "\100\001\002\000\006\005\uff9b\007\uff9b\001\002\000\060" +
    "\004\017\006\040\010\044\027\025\043\023\047\053\050" +
    "\027\053\013\055\037\056\014\057\016\060\050\061\033" +
    "\062\042\063\051\064\005\071\022\072\015\073\041\074" +
    "\070\075\010\076\055\077\032\001\002\000\072\002\ufffa" +
    "\004\ufffa\006\101\010\ufffa\027\ufffa\041\100\043\ufffa\045" +
    "\ufffa\047\ufffa\050\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa" +
    "\077\ufffa\001\002\000\010\006\101\011\246\041\100\001" +
    "\002\000\112\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\027\ufff7\041" +
    "\ufff7\043\ufff7\045\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\071\ufff7\072\ufff7" +
    "\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\001\002\000" +
    "\004\004\250\001\002\000\060\004\017\006\040\010\044" +
    "\027\025\043\023\047\053\050\027\053\013\055\037\056" +
    "\014\057\016\060\050\061\033\062\042\063\051\064\005" +
    "\071\022\072\015\073\041\074\070\075\010\076\055\077" +
    "\032\001\002\000\010\006\101\014\252\041\100\001\002" +
    "\000\060\004\017\006\040\010\044\027\025\043\023\047" +
    "\053\050\027\053\013\055\037\056\014\057\016\060\050" +
    "\061\033\062\042\063\051\064\005\071\022\072\015\073" +
    "\041\074\070\075\010\076\055\077\032\001\002\000\010" +
    "\005\254\006\101\041\100\001\002\000\112\002\uffa7\004" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\027\uffa7\041\uffa7\043\uffa7\045\uffa7\047" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7" +
    "\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\001\002\000\062\004\017\006\040\010" +
    "\044\013\uff8f\027\025\043\023\047\053\050\027\053\013" +
    "\055\037\056\014\057\016\060\050\061\033\062\042\063" +
    "\051\064\005\071\022\072\015\073\041\074\070\075\010" +
    "\076\055\077\032\001\002\000\004\007\257\001\002\000" +
    "\112\002\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\027\uff9f\041\uff9f\043" +
    "\uff9f\045\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\077\uff9f\001\002\000\004\013" +
    "\uff96\001\002\000\006\013\uff8f\014\270\001\002\000\012" +
    "\006\101\013\266\014\uff98\041\100\001\002\000\004\013" +
    "\264\001\002\000\004\007\265\001\002\000\112\002\uff9e" +
    "\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\027\uff9e\041\uff9e\043\uff9e\045\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075" +
    "\uff9e\076\uff9e\077\uff9e\001\002\000\060\004\017\006\040" +
    "\010\044\027\025\043\023\047\053\050\027\053\013\055" +
    "\037\056\014\057\016\060\050\061\033\062\042\063\051" +
    "\064\005\071\022\072\015\073\041\074\070\075\010\076" +
    "\055\077\032\001\002\000\012\006\101\013\uff99\014\uff99" +
    "\041\100\001\002\000\060\004\017\006\040\010\044\027" +
    "\025\043\023\047\053\050\027\053\013\055\037\056\014" +
    "\057\016\060\050\061\033\062\042\063\051\064\005\071" +
    "\022\072\015\073\041\074\070\075\010\076\055\077\032" +
    "\001\002\000\004\013\uff97\001\002\000\004\013\uff94\001" +
    "\002\000\006\013\uff8f\014\270\001\002\000\004\013\uff95" +
    "\001\002\000\004\004\303\001\002\000\060\004\017\006" +
    "\040\010\044\027\025\043\023\047\053\050\027\053\013" +
    "\055\037\056\014\057\016\060\050\061\033\062\042\063" +
    "\051\064\005\071\022\072\015\073\041\074\070\075\010" +
    "\076\055\077\032\001\002\000\010\006\101\014\300\041" +
    "\100\001\002\000\060\004\017\006\040\010\044\027\025" +
    "\043\023\047\053\050\027\053\013\055\037\056\014\057" +
    "\016\060\050\061\033\062\042\063\051\064\005\071\022" +
    "\072\015\073\041\074\070\075\010\076\055\077\032\001" +
    "\002\000\010\005\302\006\101\041\100\001\002\000\112" +
    "\002\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\027\uffa1\041\uffa1\043\uffa1" +
    "\045\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\071\uffa1\072\uffa1\073\uffa1\074" +
    "\uffa1\075\uffa1\076\uffa1\077\uffa1\001\002\000\060\004\017" +
    "\006\040\010\044\027\025\043\023\047\053\050\027\053" +
    "\013\055\037\056\014\057\016\060\050\061\033\062\042" +
    "\063\051\064\005\071\022\072\015\073\041\074\070\075" +
    "\010\076\055\077\032\001\002\000\010\004\305\006\101" +
    "\041\100\001\002\000\112\002\uffa8\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\027\uffa8\041\uffa8\043\uffa8\045\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8" +
    "\001\002\000\060\004\017\006\040\010\044\027\025\043" +
    "\023\047\053\050\027\053\013\055\037\056\014\057\016" +
    "\060\050\061\033\062\042\063\051\064\005\071\022\072" +
    "\015\073\041\074\070\075\010\076\055\077\032\001\002" +
    "\000\010\005\310\006\101\041\100\001\002\000\112\002" +
    "\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\027\uffa4\041\uffa4\043\uffa4\045" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064" +
    "\uffa4\065\uffa4\066\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4" +
    "\075\uffa4\076\uffa4\077\uffa4\001\002\000\070\002\ufffc\004" +
    "\ufffc\006\ufffc\010\ufffc\027\ufffc\043\ufffc\045\ufffc\047\ufffc" +
    "\050\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\071\ufffc" +
    "\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\001" +
    "\002\000\014\004\121\027\025\072\015\073\041\074\070" +
    "\001\002\000\014\004\121\027\025\072\015\073\041\074" +
    "\070\001\002\000\014\004\121\027\025\072\015\073\041" +
    "\074\070\001\002\000\124\002\uffcb\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\017\156\020\157\027\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\043\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\071\uffcb\072\uffcb" +
    "\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\001\002\000" +
    "\134\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\027\uffcc\030\113\031" +
    "\114\032\112\033\116\034\115\035\117\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\043\uffcc\045\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\001\002\000\134\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\027\uffcd" +
    "\030\113\031\114\032\112\033\116\034\115\035\117\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd\045\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076" +
    "\uffcd\077\uffcd\001\002\000\010\006\101\041\100\051\321" +
    "\001\002\000\060\004\017\006\040\010\044\027\025\043" +
    "\023\047\053\050\027\053\013\055\037\056\014\057\016" +
    "\060\050\061\033\062\042\063\051\064\005\071\022\072" +
    "\015\073\041\074\070\075\010\076\055\077\032\001\002" +
    "\000\112\002\uffd0\004\uffd0\005\uffd0\006\101\007\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\027\uffd0\041\100" +
    "\043\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052\323\053" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\066\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000\060" +
    "\004\017\006\040\010\044\027\025\043\023\047\053\050" +
    "\027\053\013\055\037\056\014\057\016\060\050\061\033" +
    "\062\042\063\051\064\005\071\022\072\015\073\041\074" +
    "\070\075\010\076\055\077\032\001\002\000\112\002\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\027\uffcf\041\uffcf\043\uffcf\045\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075" +
    "\uffcf\076\uffcf\077\uffcf\001\002\000\154\002\uffb7\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\043\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\001\002" +
    "\000\060\004\017\006\040\010\044\027\025\043\023\047" +
    "\053\050\027\053\013\055\037\056\014\057\016\060\050" +
    "\061\033\062\042\063\051\064\005\071\022\072\015\073" +
    "\041\074\070\075\010\076\055\077\032\001\002\000\010" +
    "\006\101\014\330\041\100\001\002\000\060\004\017\006" +
    "\040\010\044\027\025\043\023\047\053\050\027\053\013" +
    "\055\037\056\014\057\016\060\050\061\033\062\042\063" +
    "\051\064\005\071\022\072\015\073\041\074\070\075\010" +
    "\076\055\077\032\001\002\000\010\005\332\006\101\041" +
    "\100\001\002\000\112\002\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\027" +
    "\uffd1\041\uffd1\043\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\071\uffd1" +
    "\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\001" +
    "\002\000\060\004\017\006\040\010\044\027\025\043\023" +
    "\047\053\050\027\053\013\055\037\056\014\057\016\060" +
    "\050\061\033\062\042\063\051\064\005\071\022\072\015" +
    "\073\041\074\070\075\010\076\055\077\032\001\002\000" +
    "\010\005\335\006\101\041\100\001\002\000\004\012\336" +
    "\001\002\000\070\002\uff92\004\uff92\006\uff92\010\uff92\027" +
    "\uff92\043\uff92\045\uff92\047\uff92\050\uff92\053\uff92\055\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\065\uff92\066\uff92\071\uff92\072\uff92\073\uff92\074\uff92" +
    "\075\uff92\076\uff92\077\uff92\001\002\000\012\005\146\006" +
    "\101\014\340\041\100\001\002\000\060\004\017\006\040" +
    "\010\044\027\025\043\023\047\053\050\027\053\013\055" +
    "\037\056\014\057\016\060\050\061\033\062\042\063\051" +
    "\064\005\071\022\072\015\073\041\074\070\075\010\076" +
    "\055\077\032\001\002\000\004\005\343\001\002\000\004" +
    "\005\uffec\001\002\000\112\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\027\uffee\041\uffee\043\uffee\045\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\071" +
    "\uffee\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee" +
    "\001\002\000\012\005\uff8f\006\101\014\340\041\100\001" +
    "\002\000\004\005\uffed\001\002\000\060\004\017\006\040" +
    "\010\044\027\025\043\023\047\053\050\027\053\013\055" +
    "\037\056\014\057\016\060\050\061\033\062\042\063\051" +
    "\064\005\071\022\072\015\073\041\074\070\075\010\076" +
    "\055\077\032\001\002\000\010\004\350\006\101\041\100" +
    "\001\002\000\112\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\027\uffa9" +
    "\041\uffa9\043\uffa9\045\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\071\uffa9\072" +
    "\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\001\002" +
    "\000\060\004\017\006\040\010\044\027\025\043\023\047" +
    "\053\050\027\053\013\055\037\056\014\057\016\060\050" +
    "\061\033\062\042\063\051\064\005\071\022\072\015\073" +
    "\041\074\070\075\010\076\055\077\032\001\002\000\010" +
    "\004\353\006\101\041\100\001\002\000\112\002\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\027\uffaa\041\uffaa\043\uffaa\045\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\077\uffaa\001\002\000\062\004\017\006\040\010" +
    "\044\011\uff8f\027\025\043\023\047\053\050\027\053\013" +
    "\055\037\056\014\057\016\060\050\061\033\062\042\063" +
    "\051\064\005\071\022\072\015\073\041\074\070\075\010" +
    "\076\055\077\032\001\002\000\004\011\uffe8\001\002\000" +
    "\004\011\370\001\002\000\010\006\101\013\366\041\100" +
    "\001\002\000\006\011\uff8f\014\361\001\002\000\060\004" +
    "\017\006\040\010\044\027\025\043\023\047\053\050\027" +
    "\053\013\055\037\056\014\057\016\060\050\061\033\062" +
    "\042\063\051\064\005\071\022\072\015\073\041\074\070" +
    "\075\010\076\055\077\032\001\002\000\004\011\uffe6\001" +
    "\002\000\004\011\uffe9\001\002\000\006\011\uff8f\014\361" +
    "\001\002\000\004\011\uffe7\001\002\000\060\004\017\006" +
    "\040\010\044\027\025\043\023\047\053\050\027\053\013" +
    "\055\037\056\014\057\016\060\050\061\033\062\042\063" +
    "\051\064\005\071\022\072\015\073\041\074\070\075\010" +
    "\076\055\077\032\001\002\000\012\006\101\011\uffea\014" +
    "\uffea\041\100\001\002\000\112\002\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\027\uffeb\041\uffeb\043\uffeb\045\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077" +
    "\uffeb\001\002\000\070\002\uffff\004\uffff\006\uffff\010\uffff" +
    "\027\uffff\043\uffff\045\uffff\047\uffff\050\uffff\053\uffff\055" +
    "\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff" +
    "\064\uffff\065\uffff\066\uffff\071\uffff\072\uffff\073\uffff\074" +
    "\uffff\075\uffff\076\uffff\077\uffff\001\002\000\060\004\017" +
    "\006\040\010\044\027\025\043\023\047\053\050\027\053" +
    "\013\055\037\056\014\057\016\060\050\061\033\062\042" +
    "\063\051\064\005\071\022\072\015\073\041\074\070\075" +
    "\010\076\055\077\032\001\002\000\010\006\101\014\374" +
    "\041\100\001\002\000\060\004\017\006\040\010\044\027" +
    "\025\043\023\047\053\050\027\053\013\055\037\056\014" +
    "\057\016\060\050\061\033\062\042\063\051\064\005\071" +
    "\022\072\015\073\041\074\070\075\010\076\055\077\032" +
    "\001\002\000\010\006\101\014\376\041\100\001\002\000" +
    "\060\004\017\006\040\010\044\027\025\043\023\047\053" +
    "\050\027\053\013\055\037\056\014\057\016\060\050\061" +
    "\033\062\042\063\051\064\005\071\022\072\015\073\041" +
    "\074\070\075\010\076\055\077\032\001\002\000\010\005" +
    "\u0100\006\101\041\100\001\002\000\112\002\uffa3\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\027\uffa3\041\uffa3\043\uffa3\045\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\062\002\003\003\006\004\064\005\011\006" +
    "\023\012\030\013\020\014\045\015\025\016\033\030\057" +
    "\033\046\034\053\035\035\037\061\043\027\044\060\045" +
    "\010\046\042\047\034\050\005\051\056\052\063\053\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\004\370\005\011\006\023\012\030\013\020" +
    "\014\045\015\025\016\033\030\057\033\046\034\053\035" +
    "\035\037\061\043\027\044\060\045\010\046\042\047\034" +
    "\050\005\051\056\052\063\053\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\006\023\012\336\013\020\014\045\015\025\016\033" +
    "\025\121\030\057\033\046\034\053\035\035\037\061\043" +
    "\027\044\060\045\010\046\042\047\034\050\005\051\056" +
    "\052\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\057\051\324\052\063\001\001\000\002\001\001\000" +
    "\050\006\023\012\317\013\020\014\045\015\025\016\033" +
    "\030\057\033\046\034\053\035\035\037\061\043\027\044" +
    "\060\045\010\046\042\047\034\050\005\051\056\052\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\006\023\012" +
    "\232\013\020\014\045\015\025\016\033\017\255\030\057" +
    "\033\046\034\053\035\035\037\061\043\027\044\060\045" +
    "\010\046\042\047\034\050\005\051\056\052\063\055\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\006\023\012\244\013\020\014\045\015\025" +
    "\016\033\030\057\033\046\034\053\035\035\037\061\043" +
    "\027\044\060\045\010\046\042\047\034\050\005\051\056" +
    "\052\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\023\012\066" +
    "\013\020\014\045\015\025\016\033\030\057\033\046\034" +
    "\053\035\035\037\061\043\027\044\060\045\010\046\042" +
    "\047\034\050\005\051\056\052\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\006\023\012\072\013\020" +
    "\014\045\015\025\016\033\030\057\031\073\033\046\034" +
    "\053\035\035\037\061\043\027\044\060\045\010\046\042" +
    "\047\034\050\005\051\056\052\063\055\071\001\001\000" +
    "\002\001\001\000\006\032\076\055\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\023\012\105\013" +
    "\020\014\045\015\025\016\033\030\057\033\046\034\053" +
    "\035\035\037\061\043\027\044\060\045\010\046\042\047" +
    "\034\050\005\051\056\052\063\001\001\000\002\001\001" +
    "\000\050\006\023\012\104\013\020\014\045\015\025\016" +
    "\033\030\057\033\046\034\053\035\035\037\061\043\027" +
    "\044\060\045\010\046\042\047\034\050\005\051\056\052" +
    "\063\001\001\000\050\006\023\012\102\013\020\014\045" +
    "\015\025\016\033\030\057\033\046\034\053\035\035\037" +
    "\061\043\027\044\060\045\010\046\042\047\034\050\005" +
    "\051\056\052\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\106" +
    "\055\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\030\057\045\176\046\042\047\034" +
    "\050\005\051\056\052\063\001\001\000\020\030\057\045" +
    "\175\046\042\047\034\050\005\051\056\052\063\001\001" +
    "\000\020\030\057\045\174\046\042\047\034\050\005\051" +
    "\056\052\063\001\001\000\020\030\057\045\173\046\042" +
    "\047\034\050\005\051\056\052\063\001\001\000\020\030" +
    "\057\045\172\046\042\047\034\050\005\051\056\052\063" +
    "\001\001\000\020\030\057\045\117\046\042\047\034\050" +
    "\005\051\056\052\063\001\001\000\002\001\001\000\052" +
    "\006\023\012\122\013\020\014\045\015\025\016\033\025" +
    "\121\030\057\033\046\034\053\035\035\037\061\043\027" +
    "\044\060\045\010\046\042\047\034\050\005\051\056\052" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\130\055\127\001\001\000\050\006" +
    "\023\012\126\013\020\014\045\015\025\016\033\030\057" +
    "\033\046\034\053\035\035\037\061\043\027\044\060\045" +
    "\010\046\042\047\034\050\005\051\056\052\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\133\055\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\136\055\134\001" +
    "\001\000\002\001\001\000\050\006\023\012\144\013\020" +
    "\014\045\015\025\016\033\030\057\033\046\034\053\035" +
    "\035\037\061\043\027\044\060\045\010\046\042\047\034" +
    "\050\005\051\056\052\063\001\001\000\006\026\141\055" +
    "\127\001\001\000\002\001\001\000\050\006\023\012\143" +
    "\013\020\014\045\015\025\016\033\030\057\033\046\034" +
    "\053\035\035\037\061\043\027\044\060\045\010\046\042" +
    "\047\034\050\005\051\056\052\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\006\023\012\072\013\020\014\045\015\025\016" +
    "\033\030\057\031\150\033\046\034\053\035\035\037\061" +
    "\043\027\044\060\045\010\046\042\047\034\050\005\051" +
    "\056\052\063\055\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\030\057\046\171\047\034\050\005\051" +
    "\056\052\063\001\001\000\016\030\057\046\154\047\034" +
    "\050\005\051\056\052\063\001\001\000\002\001\001\000" +
    "\014\030\057\047\170\050\005\051\056\052\063\001\001" +
    "\000\014\030\057\047\157\050\005\051\056\052\063\001" +
    "\001\000\002\001\001\000\012\030\057\050\167\051\056" +
    "\052\063\001\001\000\012\030\057\050\166\051\056\052" +
    "\063\001\001\000\012\030\057\050\165\051\056\052\063" +
    "\001\001\000\012\030\057\050\164\051\056\052\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\006\023\012\072\013" +
    "\020\014\045\015\025\016\033\030\057\031\200\033\046" +
    "\034\053\035\035\037\061\043\027\044\060\045\010\046" +
    "\042\047\034\050\005\051\056\052\063\055\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\006\023\012" +
    "\203\013\020\014\045\015\025\016\033\030\057\033\046" +
    "\034\053\035\035\037\061\043\027\044\060\045\010\046" +
    "\042\047\034\050\005\051\056\052\063\001\001\000\002" +
    "\001\001\000\010\007\207\011\206\055\205\001\001\000" +
    "\002\001\001\000\006\010\217\055\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\023\012\212\013" +
    "\020\014\045\015\025\016\033\030\057\033\046\034\053" +
    "\035\035\037\061\043\027\044\060\045\010\046\042\047" +
    "\034\050\005\051\056\052\063\001\001\000\002\001\001" +
    "\000\050\006\023\012\214\013\020\014\045\015\025\016" +
    "\033\030\057\033\046\034\053\035\035\037\061\043\027" +
    "\044\060\045\010\046\042\047\034\050\005\051\056\052" +
    "\063\001\001\000\002\001\001\000\004\011\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\221\055" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\006\023\012\224\013\020\014\045\015\025\016\033\030" +
    "\057\033\046\034\053\035\035\037\061\043\027\044\060" +
    "\045\010\046\042\047\034\050\005\051\056\052\063\001" +
    "\001\000\002\001\001\000\050\006\023\012\226\013\020" +
    "\014\045\015\025\016\033\030\057\033\046\034\053\035" +
    "\035\037\061\043\027\044\060\045\010\046\042\047\034" +
    "\050\005\051\056\052\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\006\023\012\232\013\020\014\045" +
    "\015\025\016\033\017\233\030\057\033\046\034\053\035" +
    "\035\037\061\043\027\044\060\045\010\046\042\047\034" +
    "\050\005\051\056\052\063\055\231\001\001\000\002\001" +
    "\001\000\006\020\236\055\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\006\023\012\240\013\020\014" +
    "\045\015\025\016\033\030\057\033\046\034\053\035\035" +
    "\037\061\043\027\044\060\045\010\046\042\047\034\050" +
    "\005\051\056\052\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\241\055\237\001\001\000\002\001" +
    "\001\000\050\006\023\012\243\013\020\014\045\015\025" +
    "\016\033\030\057\033\046\034\053\035\035\037\061\043" +
    "\027\044\060\045\010\046\042\047\034\050\005\051\056" +
    "\052\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\023\012\250" +
    "\013\020\014\045\015\025\016\033\030\057\033\046\034" +
    "\053\035\035\037\061\043\027\044\060\045\010\046\042" +
    "\047\034\050\005\051\056\052\063\001\001\000\002\001" +
    "\001\000\050\006\023\012\252\013\020\014\045\015\025" +
    "\016\033\030\057\033\046\034\053\035\035\037\061\043" +
    "\027\044\060\045\010\046\042\047\034\050\005\051\056" +
    "\052\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\006\023\012\261\013\020\014\045\015\025\016\033" +
    "\021\260\022\262\030\057\033\046\034\053\035\035\037" +
    "\061\043\027\044\060\045\010\046\042\047\034\050\005" +
    "\051\056\052\063\055\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\270\055\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\006\023\012\266\013\020" +
    "\014\045\015\025\016\033\030\057\033\046\034\053\035" +
    "\035\037\061\043\027\044\060\045\010\046\042\047\034" +
    "\050\005\051\056\052\063\001\001\000\002\001\001\000" +
    "\052\006\023\012\261\013\020\014\045\015\025\016\033" +
    "\021\272\030\057\033\046\034\053\035\035\037\061\043" +
    "\027\044\060\045\010\046\042\047\034\050\005\051\056" +
    "\052\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\273\055\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\006\023\012\276\013\020\014\045\015" +
    "\025\016\033\030\057\033\046\034\053\035\035\037\061" +
    "\043\027\044\060\045\010\046\042\047\034\050\005\051" +
    "\056\052\063\001\001\000\002\001\001\000\050\006\023" +
    "\012\300\013\020\014\045\015\025\016\033\030\057\033" +
    "\046\034\053\035\035\037\061\043\027\044\060\045\010" +
    "\046\042\047\034\050\005\051\056\052\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\023\012\303" +
    "\013\020\014\045\015\025\016\033\030\057\033\046\034" +
    "\053\035\035\037\061\043\027\044\060\045\010\046\042" +
    "\047\034\050\005\051\056\052\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\006\023\012\306\013\020" +
    "\014\045\015\025\016\033\030\057\033\046\034\053\035" +
    "\035\037\061\043\027\044\060\045\010\046\042\047\034" +
    "\050\005\051\056\052\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\057\044\316" +
    "\045\010\046\042\047\034\050\005\051\056\052\063\001" +
    "\001\000\022\030\057\044\315\045\010\046\042\047\034" +
    "\050\005\051\056\052\063\001\001\000\016\030\057\046" +
    "\314\047\034\050\005\051\056\052\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\006\023\012\321\013\020\014\045\015\025" +
    "\016\033\030\057\033\046\034\053\035\035\037\061\043" +
    "\027\044\060\045\010\046\042\047\034\050\005\051\056" +
    "\052\063\001\001\000\002\001\001\000\050\006\023\012" +
    "\323\013\020\014\045\015\025\016\033\030\057\033\046" +
    "\034\053\035\035\037\061\043\027\044\060\045\010\046" +
    "\042\047\034\050\005\051\056\052\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\023\012\326\013" +
    "\020\014\045\015\025\016\033\030\057\033\046\034\053" +
    "\035\035\037\061\043\027\044\060\045\010\046\042\047" +
    "\034\050\005\051\056\052\063\001\001\000\002\001\001" +
    "\000\050\006\023\012\330\013\020\014\045\015\025\016" +
    "\033\030\057\033\046\034\053\035\035\037\061\043\027" +
    "\044\060\045\010\046\042\047\034\050\005\051\056\052" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\006\023\012\333\013\020\014\045\015\025\016\033\030" +
    "\057\033\046\034\053\035\035\037\061\043\027\044\060" +
    "\045\010\046\042\047\034\050\005\051\056\052\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\340\055\341\001\001\000\050\006\023\012" +
    "\343\013\020\014\045\015\025\016\033\030\057\033\046" +
    "\034\053\035\035\037\061\043\027\044\060\045\010\046" +
    "\042\047\034\050\005\051\056\052\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\344\055\341\001\001\000\002\001\001\000\050\006\023" +
    "\012\346\013\020\014\045\015\025\016\033\030\057\033" +
    "\046\034\053\035\035\037\061\043\027\044\060\045\010" +
    "\046\042\047\034\050\005\051\056\052\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\023\012\351" +
    "\013\020\014\045\015\025\016\033\030\057\033\046\034" +
    "\053\035\035\037\061\043\027\044\060\045\010\046\042" +
    "\047\034\050\005\051\056\052\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\006\023\012\356\013\020" +
    "\014\045\015\025\016\033\030\057\033\046\034\053\035" +
    "\035\037\061\040\357\041\355\043\027\044\060\045\010" +
    "\046\042\047\034\050\005\051\056\052\063\055\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\042\362\055\361\001\001\000\052\006\023\012" +
    "\356\013\020\014\045\015\025\016\033\030\057\033\046" +
    "\034\053\035\035\037\061\040\363\043\027\044\060\045" +
    "\010\046\042\047\034\050\005\051\056\052\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\364\055" +
    "\361\001\001\000\002\001\001\000\050\006\023\012\366" +
    "\013\020\014\045\015\025\016\033\030\057\033\046\034" +
    "\053\035\035\037\061\043\027\044\060\045\010\046\042" +
    "\047\034\050\005\051\056\052\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\006\023" +
    "\012\372\013\020\014\045\015\025\016\033\030\057\033" +
    "\046\034\053\035\035\037\061\043\027\044\060\045\010" +
    "\046\042\047\034\050\005\051\056\052\063\001\001\000" +
    "\002\001\001\000\050\006\023\012\374\013\020\014\045" +
    "\015\025\016\033\030\057\033\046\034\053\035\035\037" +
    "\061\043\027\044\060\045\010\046\042\047\034\050\005" +
    "\051\056\052\063\001\001\000\002\001\001\000\050\006" +
    "\023\012\376\013\020\014\045\015\025\016\033\030\057" +
    "\033\046\034\053\035\035\037\061\043\027\044\060\045" +
    "\010\046\042\047\034\050\005\051\056\052\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxSMPLException(msg, ioe);
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= printStmt 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement p = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StmtDefinition(v,e);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= DEF VARIABLE expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                RESULT = new StmtDefinition(v,e);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= LBRACE expression RBRACE 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= logicExp 
            {
              Exp RESULT =null;
		int lxleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lxright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp lx = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lx; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= callExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= ifExp 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= multiExp 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = m; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= caseExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= makeLit 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = m; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= concatenation 
            {
              Exp RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp cn = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = cn; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= builtInFn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // multiExp ::= LPAREN expression exps RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                el.add(0,e);
                RESULT = new ExpMult(el);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("multiExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exps ::= COMMA expression exps 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                el.add(0,e);
                RESULT = el;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("exps",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exps ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("exps",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // caseExp ::= CASE LBRACE cases RBRACE 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpCase(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseExp",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // case ::= expression COLON expression 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Case(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cases ::= case casesAux 
            {
              ArrayList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Case> cl = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            cl.add(0,c);
            RESULT = cl;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cases",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cases ::= empty 
            {
              ArrayList<Case> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cases",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // casesAux ::= COMMA case casesAux 
            {
              ArrayList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Case> cl = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            cl.add(0,c);
            RESULT = cl;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("casesAux",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // casesAux ::= empty 
            {
              ArrayList<Case> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("casesAux",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // letExp ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letExp",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binding ::= VARIABLE EQ expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedureDef ::= PROC LPAREN params RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new ExpProcedure(p,e);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureDef",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedureDef ::= PROC VARIABLE expression 
            {
              ExpProcedure RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new ExpProcedure(v,e); 
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureDef",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedureDef ::= PROC LPAREN params DOT params RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> pr = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new ExpProcedure(p,pr,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureDef",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params ::= VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    pl.add(v);
                    RESULT = pl;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // params ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramsAux ::= COMMA VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    pl.add(v);
                    RESULT = pl;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramsAux",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramsAux ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramsAux",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedureApp ::= VARIABLE LPAREN args RPAREN 
            {
              ExpApplyProc RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> ar = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		                    
                    RESULT =  new ExpApplyProc(v,ar); 
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureApp",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedureApp ::= LPAREN procedureDef RPAREN LPAREN args RPAREN 
            {
              ExpApplyProc RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ExpProcedure pd = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> ar = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new ExpApplyProc(pd,ar);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureApp",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedureApp ::= procedureApp LPAREN args RPAREN 
            {
              ExpApplyProc RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ExpApplyProc pa = (ExpApplyProc)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> ar = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                    RESULT = new ExpApplyProc(pa,ar);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureApp",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // args ::= expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    al.add(e);
                    RESULT = al;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("args",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // args ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("args",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // argsAux ::= COMMA expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    al.add(e);
                    RESULT = al;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("argsAux",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // argsAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("argsAux",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // callExp ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new ExpCall(a,b);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifExp ::= IF expression THEN expression 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpIf(i,t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ifExp ::= IF expression THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpIf(i,t,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lazyExp ::= LAZY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpLazy(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazyExp",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logicExp ::= logicExp NOT comparison 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpNot(e,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logicExp ::= logicExp AND comparison 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpAnd(e,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logicExp ::= logicExp OR arithExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpOr(e,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logicExp ::= comparison 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparison ::= comparison EQ bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 new ExpEQ(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparison ::= comparison GT bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 new ExpGT(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comparison ::= comparison LT bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 new ExpLT(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparison ::= comparison GE bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 new ExpGE(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comparison ::= comparison LE bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 new ExpLE(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparison ::= comparison NEQ bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 new ExpNEQ(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparison ::= bitExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bitExp ::= bitExp BITAND arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpBitAnd(b,a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bitExp ::= bitExp BITOR arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpBitOr(b,a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bitExp ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= term MUL comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= term DIV comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= term MOD comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= term POW comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                RESULT = new ExpPow(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= comp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comp ::= COMP factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comp",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comp ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comp",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // number ::= INTEGER 
            {
              SMPLValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = SMPLValue.make(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("number",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // number ::= REAL 
            {
              SMPLValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT =  SMPLValue.make(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("number",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLValue< ? > n = (SMPLValue< ? >)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= procedureApp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpApplyProc a = (ExpApplyProc)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // makeLit ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeLit",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // makeLit ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeLit",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // makeLit ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new ExpLit(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeLit",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // makeLit ::= BOOLEAN 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeLit",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // concatenation ::= expression CONCAT expression 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 new ExpConcat(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("concatenation",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // builtInFn ::= CAR LPAREN expression LPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpCar(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // builtInFn ::= CDR LPAREN expression LPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpCdr(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // builtInFn ::= PAIR QUERY LPAREN expression LPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpIsPair(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // builtInFn ::= EQV QUERY LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpIsEqv(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // builtInFn ::= EQL QUERY LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpIsEql(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // builtInFn ::= expression LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpGet(e,n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // builtInFn ::= SIZE LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpSize(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // builtInFn ::= SUBSTRING LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new ExpSubstr(a,b,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // builtInFn ::= makeCompound 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = m; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // makeCompound ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpPair(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // makeCompound ::= LIST LPAREN expList RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpList(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // makeCompound ::= LBRACK expList RBRACK 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpList(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // makeCompound ::= LBRACK COLON specList COLON RBRACK 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Specification> l = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new ExpVector(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expList ::= expression expListAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                el.add(0,e);
                RESULT = el; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expList ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expListAux ::= COMMA expression expListAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                el.add(0,e);
                RESULT = el; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListAux",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expListAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListAux",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // specification ::= expression COLON expression 
            {
              Specification RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Specification(n,f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specification",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // specification ::= expression 
            {
              Specification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Specification(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specification",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // specList ::= specification specListAux 
            {
              ArrayList<Specification> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Specification s = (Specification)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Specification> sl = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                sl.add(0,s);
                RESULT = sl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specList",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // specList ::= empty 
            {
              ArrayList<Specification> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specList",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // specListAux ::= COMMA specification specListAux 
            {
              ArrayList<Specification> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Specification s = (Specification)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Specification> sl = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                sl.add(0,s);
                RESULT = sl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specListAux",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // specListAux ::= empty 
            {
              ArrayList<Specification> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specListAux",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // printStmt ::= PRINT LPAREN expression RPAREN SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                RESULT = new StmtPrint(e);
              
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStmt",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // printStmt ::= PRINTLN LPAREN expression RPAREN SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                RESULT = new StmtPrint(e,true);
              
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStmt",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // readExp ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readExp",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // readExp ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead(true); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readExp",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
