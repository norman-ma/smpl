
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSMPLException;
import smpl.values.SMPLValue;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\006\000\002" +
    "\005\006\000\002\006\006\000\002\040\004\000\002\040" +
    "\005\000\002\040\004\000\002\040\005\000\002\013\003" +
    "\000\002\013\005\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\041\005\000\002\042" +
    "\006\000\002\043\005\000\002\043\005\000\002\044\004" +
    "\000\002\044\003\000\002\045\005\000\002\045\003\000" +
    "\002\036\012\000\002\036\006\000\002\007\007\000\002" +
    "\012\005\000\002\010\004\000\002\010\003\000\002\011" +
    "\005\000\002\011\003\000\002\027\007\000\002\027\005" +
    "\000\002\027\011\000\002\030\004\000\002\030\003\000" +
    "\002\031\005\000\002\031\003\000\002\032\006\000\002" +
    "\032\010\000\002\032\006\000\002\033\004\000\002\033" +
    "\003\000\002\034\005\000\002\034\003\000\002\035\010" +
    "\000\002\037\006\000\002\037\010\000\002\026\006\000" +
    "\002\046\004\000\002\046\005\000\002\046\005\000\002" +
    "\046\003\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\005\000\002\047\005" +
    "\000\002\047\003\000\002\050\005\000\002\050\005\000" +
    "\002\050\003\000\002\051\005\000\002\051\005\000\002" +
    "\051\003\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\003\000\002\053\004" +
    "\000\002\053\003\000\002\015\005\000\002\015\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\005\000\002" +
    "\054\006\000\002\054\006\000\002\054\006\000\002\054" +
    "\012\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\016" +
    "\007\000\002\016\011\000\002\016\011\000\002\016\006" +
    "\000\002\016\003\000\002\017\010\000\002\017\006\000" +
    "\002\017\005\000\002\017\005\000\002\020\004\000\002" +
    "\020\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\004\000\002\023\004\000\002\023\003\000\002\024\004" +
    "\000\002\024\003\000\002\025\005\000\002\025\003\000" +
    "\002\056\007\000\002\056\007\000\002\057\005\000\002" +
    "\057\005\000\002\060\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\116\004\025\006\057\010\064\012\024\021" +
    "\034\030\042\041\036\043\077\044\041\045\040\046\101" +
    "\047\uff7f\050\076\051\045\054\020\055\033\056\072\062" +
    "\056\063\021\064\023\065\073\066\051\067\061\070\074" +
    "\071\007\076\106\077\030\100\067\101\015\102\037\103" +
    "\022\104\063\105\027\106\060\107\066\110\013\111\100" +
    "\112\050\001\002\000\010\005\uffd2\017\uffd2\047\uffd2\001" +
    "\002\000\004\002\u012e\001\002\000\122\002\ufffc\004\ufffc" +
    "\006\ufffc\010\ufffc\011\ufffc\012\ufffc\021\ufffc\030\ufffc\041" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\054\ufffc\055\ufffc\056\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\076\ufffc" +
    "\077\ufffc\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc\105" +
    "\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\001\002" +
    "\000\004\004\u0127\001\002\000\004\047\u0124\001\002\000" +
    "\202\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\076" +
    "\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf" +
    "\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\001" +
    "\002\000\120\002\001\004\025\006\057\010\064\012\024" +
    "\021\034\030\042\041\036\043\077\044\041\045\040\046" +
    "\101\047\uff7f\050\076\051\045\054\020\055\033\056\072" +
    "\062\056\063\021\064\023\065\073\066\051\067\061\070" +
    "\074\071\007\076\106\077\030\100\067\101\015\102\037" +
    "\103\022\104\063\105\027\106\060\107\066\110\013\111" +
    "\100\112\050\001\002\000\204\002\uff9e\004\uff9e\005\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\070\uff9e\071\uff9e\076\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107" +
    "\uff9e\110\uff9e\111\uff9e\112\uff9e\001\002\000\122\002\ufff9" +
    "\004\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9\021\ufff9\030" +
    "\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\054\ufff9\055\ufff9\056\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9" +
    "\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103\ufff9\104" +
    "\ufff9\105\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\112\ufff9" +
    "\001\002\000\004\004\u0122\001\002\000\170\002\uffba\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\013\uffba\014\uffba\015\uffba\016\uffba\021\uffba\026\143\027" +
    "\144\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\056\uffba\057\uffba\062\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\076\uffba" +
    "\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105" +
    "\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba\001\002" +
    "\000\122\002\ufffd\004\ufffd\006\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\021\ufffd\030\ufffd\041\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\070\ufffd\071\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102" +
    "\ufffd\103\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd" +
    "\111\ufffd\112\ufffd\001\002\000\004\010\u0112\001\002\000" +
    "\004\004\u010f\001\002\000\204\002\uff9d\004\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066" +
    "\uff9d\067\uff9d\070\uff9d\071\uff9d\076\uff9d\077\uff9d\100\uff9d" +
    "\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107" +
    "\uff9d\110\uff9d\111\uff9d\112\uff9d\001\002\000\004\004\u010c" +
    "\001\002\000\102\004\025\006\057\010\064\012\024\013" +
    "\uff7f\021\034\030\042\041\036\043\077\044\041\045\040" +
    "\050\076\054\020\062\056\063\021\064\023\065\073\066" +
    "\051\067\061\070\074\071\007\100\067\101\015\102\037" +
    "\103\022\104\063\105\027\106\060\107\113\110\013\111" +
    "\100\112\050\001\002\000\102\004\025\005\uff7f\006\057" +
    "\010\064\012\024\021\034\030\042\041\036\043\077\044" +
    "\041\045\040\050\076\054\020\062\056\063\021\064\023" +
    "\065\073\066\051\067\061\070\074\071\007\100\067\101" +
    "\015\102\037\103\022\104\063\105\027\106\060\107\113" +
    "\110\013\111\100\112\050\001\002\000\204\002\uffa3\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\057\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\076\uffa3\077" +
    "\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3" +
    "\106\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3\001\002\000" +
    "\204\002\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071" +
    "\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b" +
    "\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111\uff9b\112" +
    "\uff9b\001\002\000\004\004\367\001\002\000\122\002\ufff8" +
    "\004\ufff8\006\ufff8\010\ufff8\011\ufff8\012\ufff8\021\ufff8\030" +
    "\ufff8\041\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\054\ufff8\055\ufff8\056\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8" +
    "\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104" +
    "\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8" +
    "\001\002\000\144\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\021\uffe9\030\uffe9\041\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\076\uffe9" +
    "\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105" +
    "\uffe9\106\uffe9\107\uffe9\110\uffe9\111\uffe9\112\uffe9\001\002" +
    "\000\004\004\356\001\002\000\042\004\141\021\034\045" +
    "\040\063\021\064\023\066\051\071\007\102\037\103\022" +
    "\104\063\105\027\106\060\107\113\110\013\111\100\112" +
    "\050\001\002\000\204\002\uffa2\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\071\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2" +
    "\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110" +
    "\uffa2\111\uffa2\112\uffa2\001\002\000\044\004\141\021\034" +
    "\030\042\045\040\063\021\064\023\066\051\071\007\102" +
    "\037\103\022\104\063\105\027\106\060\107\113\110\013" +
    "\111\100\112\050\001\002\000\204\002\uff98\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\056\uff98\057\uff98\062\uff98\063\uff98\064\uff98\065\uff98" +
    "\066\uff98\067\uff98\070\uff98\071\uff98\076\uff98\077\uff98\100" +
    "\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98" +
    "\107\uff98\110\uff98\111\uff98\112\uff98\001\002\000\004\004" +
    "\351\001\002\000\004\004\344\001\002\000\042\004\141" +
    "\021\034\045\040\063\021\064\023\066\051\071\007\102" +
    "\037\103\022\104\063\105\027\106\060\107\113\110\013" +
    "\111\100\112\050\001\002\000\144\002\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\021\uffef\030\uffef\041\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\062" +
    "\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef" +
    "\071\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102\uffef\103" +
    "\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110\uffef\111\uffef" +
    "\112\uffef\001\002\000\144\002\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\021\uffe8\030\uffe8\041\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\062\uffe8\063" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8" +
    "\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104" +
    "\uffe8\105\uffe8\106\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8" +
    "\001\002\000\100\004\025\006\057\010\064\012\024\021" +
    "\034\030\042\041\036\043\077\044\041\045\040\050\076" +
    "\054\020\062\056\063\021\064\023\065\073\066\051\067" +
    "\061\070\074\071\007\100\067\101\015\102\037\103\022" +
    "\104\063\105\027\106\060\107\113\110\013\111\100\112" +
    "\050\001\002\000\150\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\021\uffed\030\uffed\037\332\040\333\041\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070" +
    "\uffed\071\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed" +
    "\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111" +
    "\uffed\112\uffed\001\002\000\006\006\123\014\331\001\002" +
    "\000\204\002\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99" +
    "\071\uff99\076\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103" +
    "\uff99\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99\111\uff99" +
    "\112\uff99\001\002\000\004\004\326\001\002\000\144\002" +
    "\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\021\uff93\030" +
    "\uff93\041\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056" +
    "\uff93\057\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93" +
    "\067\uff93\070\uff93\071\uff93\076\uff93\077\uff93\100\uff93\101" +
    "\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93" +
    "\110\uff93\111\uff93\112\uff93\001\002\000\202\002\uffb4\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\021\uffb4\022" +
    "\153\023\154\024\151\025\152\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\070\uffb4\071\uffb4\076\uffb4\077\uffb4\100" +
    "\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4" +
    "\107\uffb4\110\uffb4\111\uffb4\112\uffb4\001\002\000\144\002" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\021\uffe7\030" +
    "\uffe7\041\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\070\uffe7\071\uffe7\076\uffe7\077\uffe7\100\uffe7\101" +
    "\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7" +
    "\110\uffe7\111\uffe7\112\uffe7\001\002\000\144\002\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\030\uffeb\041" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102" +
    "\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb" +
    "\111\uffeb\112\uffeb\001\002\000\006\004\316\061\315\001" +
    "\002\000\102\004\025\006\057\007\uff7f\010\064\012\024" +
    "\021\034\030\042\041\036\043\077\044\041\045\040\050" +
    "\076\054\020\062\056\063\021\064\023\065\073\066\051" +
    "\067\061\070\074\071\007\100\067\101\015\102\037\103" +
    "\022\104\063\105\027\106\060\107\113\110\013\111\100" +
    "\112\050\001\002\000\204\002\uff9a\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\015\uff9a\016\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a" +
    "\067\uff9a\070\uff9a\071\uff9a\076\uff9a\077\uff9a\100\uff9a\101" +
    "\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a" +
    "\110\uff9a\111\uff9a\112\uff9a\001\002\000\004\061\305\001" +
    "\002\000\172\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\020\146\021\147\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\076\uffb7\077\uffb7\100\uffb7\101" +
    "\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7" +
    "\110\uffb7\111\uffb7\112\uffb7\001\002\000\204\002\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\016\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\076\uff9c\077" +
    "\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c" +
    "\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c\001\002\000" +
    "\116\004\025\006\057\010\064\012\024\021\034\030\042" +
    "\041\036\043\077\044\041\045\040\046\101\047\uff7f\050" +
    "\076\051\045\054\020\055\033\056\072\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\076" +
    "\106\077\030\100\067\101\015\102\037\103\022\104\063" +
    "\105\027\106\060\107\066\110\013\111\100\112\050\001" +
    "\002\000\004\014\301\001\002\000\066\004\114\006\uffa9" +
    "\014\uffa9\016\210\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\042\uffa9\047" +
    "\272\072\273\073\274\074\270\075\271\001\002\000\004" +
    "\004\266\001\002\000\204\002\uffad\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\264\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\057\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad" +
    "\067\uffad\070\uffad\071\uffad\076\uffad\077\uffad\100\uffad\101" +
    "\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad" +
    "\110\uffad\111\uffad\112\uffad\001\002\000\144\002\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\021\uffec\030\uffec\041" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\071\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102" +
    "\uffec\103\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec" +
    "\111\uffec\112\uffec\001\002\000\100\004\025\006\057\010" +
    "\064\012\024\021\034\030\042\041\036\043\077\044\041" +
    "\045\040\050\076\054\020\062\056\063\021\064\023\065" +
    "\073\066\051\067\061\070\074\071\007\100\067\101\015" +
    "\102\037\103\022\104\063\105\027\106\060\107\113\110" +
    "\013\111\100\112\050\001\002\000\004\004\247\001\002" +
    "\000\004\061\241\001\002\000\122\002\ufff7\004\ufff7\006" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\021\ufff7\030\ufff7\041\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\076\ufff7\077" +
    "\ufff7\100\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\105\ufff7" +
    "\106\ufff7\107\ufff7\110\ufff7\111\ufff7\112\ufff7\001\002\000" +
    "\004\004\223\001\002\000\006\004\203\107\204\001\002" +
    "\000\204\002\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\062" +
    "\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\071\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f" +
    "\112\uff9f\001\002\000\004\107\200\001\002\000\204\002" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\076" +
    "\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab" +
    "\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab\112\uffab\001" +
    "\002\000\204\002\uffa1\004\175\005\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070" +
    "\uffa1\071\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1" +
    "\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111" +
    "\uffa1\112\uffa1\001\002\000\164\002\uffc1\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\021\uffc1\030\uffc1\031\134\032\135" +
    "\033\133\034\137\035\136\036\140\037\uffc1\040\uffc1\041" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\070\uffc1\071\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102" +
    "\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1" +
    "\111\uffc1\112\uffc1\001\002\000\144\002\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\021\uffea\030\uffea\041\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea" +
    "\071\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103" +
    "\uffea\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea" +
    "\112\uffea\001\002\000\004\004\111\001\002\000\122\002" +
    "\ufffe\004\ufffe\006\ufffe\010\ufffe\011\ufffe\012\ufffe\021\ufffe" +
    "\030\ufffe\041\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\054\ufffe\055\ufffe\056\ufffe\062\ufffe" +
    "\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071" +
    "\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe" +
    "\104\ufffe\105\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112" +
    "\ufffe\001\002\000\204\002\uffaa\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa" +
    "\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110" +
    "\uffaa\111\uffaa\112\uffaa\001\002\000\100\004\025\006\057" +
    "\010\064\012\024\021\034\030\042\041\036\043\077\044" +
    "\041\045\040\050\076\054\020\062\056\063\021\064\023" +
    "\065\073\066\051\067\061\070\074\071\007\100\067\101" +
    "\015\102\037\103\022\104\063\105\027\106\060\107\113" +
    "\110\013\111\100\112\050\001\002\000\006\005\131\006" +
    "\123\001\002\000\204\002\uffa9\004\114\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9" +
    "\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110" +
    "\uffa9\111\uffa9\112\uffa9\001\002\000\102\004\025\005\uff7f" +
    "\006\057\010\064\012\024\021\034\030\042\041\036\043" +
    "\077\044\041\045\040\050\076\054\020\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\100" +
    "\067\101\015\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\004\005" +
    "\uffcb\001\002\000\010\005\uff7f\006\123\016\121\001\002" +
    "\000\004\005\120\001\002\000\204\002\uffcf\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\070\uffcf\071\uffcf\076\uffcf\077\uffcf\100" +
    "\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf" +
    "\107\uffcf\110\uffcf\111\uffcf\112\uffcf\001\002\000\100\004" +
    "\025\006\057\010\064\012\024\021\034\030\042\041\036" +
    "\043\077\044\041\045\040\050\076\054\020\062\056\063" +
    "\021\064\023\065\073\066\051\067\061\070\074\071\007" +
    "\100\067\101\015\102\037\103\022\104\063\105\027\106" +
    "\060\107\113\110\013\111\100\112\050\001\002\000\004" +
    "\005\uffcc\001\002\000\100\004\025\006\057\010\064\012" +
    "\024\021\034\030\042\041\036\043\077\044\041\045\040" +
    "\050\076\054\020\062\056\063\021\064\023\065\073\066" +
    "\051\067\061\070\074\071\007\100\067\101\015\102\037" +
    "\103\022\104\063\105\027\106\060\107\113\110\013\111" +
    "\100\112\050\001\002\000\004\005\uffc9\001\002\000\006" +
    "\006\123\007\126\001\002\000\144\002\uff94\004\uff94\005" +
    "\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\021\uff94\030\uff94\041\uff94\043" +
    "\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\062" +
    "\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94" +
    "\071\uff94\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103" +
    "\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94" +
    "\112\uff94\001\002\000\010\005\uff7f\006\123\016\121\001" +
    "\002\000\004\005\uffca\001\002\000\004\014\132\001\002" +
    "\000\122\002\uff83\004\uff83\006\uff83\010\uff83\011\uff83\012" +
    "\uff83\021\uff83\030\uff83\041\uff83\043\uff83\044\uff83\045\uff83" +
    "\046\uff83\047\uff83\050\uff83\051\uff83\054\uff83\055\uff83\056" +
    "\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83" +
    "\070\uff83\071\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102" +
    "\uff83\103\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83" +
    "\111\uff83\112\uff83\001\002\000\044\004\141\021\034\030" +
    "\042\045\040\063\021\064\023\066\051\071\007\102\037" +
    "\103\022\104\063\105\027\106\060\107\113\110\013\111" +
    "\100\112\050\001\002\000\044\004\141\021\034\030\042" +
    "\045\040\063\021\064\023\066\051\071\007\102\037\103" +
    "\022\104\063\105\027\106\060\107\113\110\013\111\100" +
    "\112\050\001\002\000\044\004\141\021\034\030\042\045" +
    "\040\063\021\064\023\066\051\071\007\102\037\103\022" +
    "\104\063\105\027\106\060\107\113\110\013\111\100\112" +
    "\050\001\002\000\044\004\141\021\034\030\042\045\040" +
    "\063\021\064\023\066\051\071\007\102\037\103\022\104" +
    "\063\105\027\106\060\107\113\110\013\111\100\112\050" +
    "\001\002\000\044\004\141\021\034\030\042\045\040\063" +
    "\021\064\023\066\051\071\007\102\037\103\022\104\063" +
    "\105\027\106\060\107\113\110\013\111\100\112\050\001" +
    "\002\000\044\004\141\021\034\030\042\045\040\063\021" +
    "\064\023\066\051\071\007\102\037\103\022\104\063\105" +
    "\027\106\060\107\113\110\013\111\100\112\050\001\002" +
    "\000\100\004\025\006\057\010\064\012\024\021\034\030" +
    "\042\041\036\043\077\044\041\045\040\050\076\054\020" +
    "\062\056\063\021\064\023\065\073\066\051\067\061\070" +
    "\074\071\007\100\067\101\015\102\037\103\022\104\063" +
    "\105\027\106\060\107\113\110\013\111\100\112\050\001" +
    "\002\000\170\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\021\uffbb\026\143\027\144\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb" +
    "\070\uffbb\071\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102" +
    "\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb" +
    "\111\uffbb\112\uffbb\001\002\000\044\004\141\021\034\030" +
    "\042\045\040\063\021\064\023\066\051\071\007\102\037" +
    "\103\022\104\063\105\027\106\060\107\113\110\013\111" +
    "\100\112\050\001\002\000\044\004\141\021\034\030\042" +
    "\045\040\063\021\064\023\066\051\071\007\102\037\103" +
    "\022\104\063\105\027\106\060\107\113\110\013\111\100" +
    "\112\050\001\002\000\172\002\uffb8\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\020\146\021\147\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\043\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106" +
    "\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\001\002\000\044" +
    "\004\141\021\034\030\042\045\040\063\021\064\023\066" +
    "\051\071\007\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\044\004" +
    "\141\021\034\030\042\045\040\063\021\064\023\066\051" +
    "\071\007\102\037\103\022\104\063\105\027\106\060\107" +
    "\113\110\013\111\100\112\050\001\002\000\202\002\uffb5" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\021\uffb5" +
    "\022\153\023\154\024\151\025\152\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106" +
    "\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\001\002\000\044" +
    "\004\141\021\034\030\042\045\040\063\021\064\023\066" +
    "\051\071\007\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\044\004" +
    "\141\021\034\030\042\045\040\063\021\064\023\066\051" +
    "\071\007\102\037\103\022\104\063\105\027\106\060\107" +
    "\113\110\013\111\100\112\050\001\002\000\044\004\141" +
    "\021\034\030\042\045\040\063\021\064\023\066\051\071" +
    "\007\102\037\103\022\104\063\105\027\106\060\107\113" +
    "\110\013\111\100\112\050\001\002\000\044\004\141\021" +
    "\034\030\042\045\040\063\021\064\023\066\051\071\007" +
    "\102\037\103\022\104\063\105\027\106\060\107\113\110" +
    "\013\111\100\112\050\001\002\000\202\002\uffb2\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\071\uffb2\076\uffb2\077\uffb2\100\uffb2" +
    "\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107" +
    "\uffb2\110\uffb2\111\uffb2\112\uffb2\001\002\000\202\002\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\062\uffb3\063\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\076\uffb3\077\uffb3" +
    "\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\001\002\000\202" +
    "\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\001\002" +
    "\000\202\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1" +
    "\001\002\000\202\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\020\uffb6\021\uffb6\022\153\023\154\024\151\025" +
    "\152\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\062" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6" +
    "\112\uffb6\001\002\000\172\002\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\020\146\021\147\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\076\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106" +
    "\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\001\002\000\006" +
    "\005\164\006\123\001\002\000\204\002\uffa8\004\uffa8\005" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\uffa8\070\uffa8\071\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\112\uffa8\001\002\000\102\004" +
    "\025\005\uff7f\006\057\010\064\012\024\021\034\030\042" +
    "\041\036\043\077\044\041\045\040\050\076\054\020\062" +
    "\056\063\021\064\023\065\073\066\051\067\061\070\074" +
    "\071\007\100\067\101\015\102\037\103\022\104\063\105" +
    "\027\106\060\107\113\110\013\111\100\112\050\001\002" +
    "\000\004\005\167\001\002\000\204\002\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\066\uffce\067\uffce\070\uffce\071\uffce\076\uffce\077\uffce\100" +
    "\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce" +
    "\107\uffce\110\uffce\111\uffce\112\uffce\001\002\000\170\002" +
    "\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\021\uffbd\026" +
    "\143\027\144\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd" +
    "\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104" +
    "\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd" +
    "\001\002\000\170\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\021\uffbc\026\143\027\144\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067" +
    "\uffbc\070\uffbc\071\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110" +
    "\uffbc\111\uffbc\112\uffbc\001\002\000\170\002\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\021\uffbf\026\143\027\144" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\076\uffbf\077" +
    "\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf" +
    "\106\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf\001\002\000" +
    "\170\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\021" +
    "\uffc0\026\143\027\144\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0" +
    "\071\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103" +
    "\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0" +
    "\112\uffc0\001\002\000\170\002\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\021\uffbe\026\143\027\144\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\067\uffbe\070\uffbe\071\uffbe\076\uffbe\077\uffbe\100\uffbe" +
    "\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107" +
    "\uffbe\110\uffbe\111\uffbe\112\uffbe\001\002\000\102\004\025" +
    "\005\uff7f\006\057\010\064\012\024\021\034\030\042\041" +
    "\036\043\077\044\041\045\040\050\076\054\020\062\056" +
    "\063\021\064\023\065\073\066\051\067\061\070\074\071" +
    "\007\100\067\101\015\102\037\103\022\104\063\105\027" +
    "\106\060\107\113\110\013\111\100\112\050\001\002\000" +
    "\004\005\177\001\002\000\204\002\uffcd\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107" +
    "\uffcd\110\uffcd\111\uffcd\112\uffcd\001\002\000\100\004\025" +
    "\006\057\010\064\012\024\021\034\030\042\041\036\043" +
    "\077\044\041\045\040\050\076\054\020\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\100" +
    "\067\101\015\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\006\006" +
    "\123\014\202\001\002\000\122\002\ufff5\004\ufff5\006\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\021\ufff5\030\ufff5\041\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\062\ufff5\063\ufff5\064\ufff5\065" +
    "\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\076\ufff5\077\ufff5" +
    "\100\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106" +
    "\ufff5\107\ufff5\110\ufff5\111\ufff5\112\ufff5\001\002\000\010" +
    "\005\uff7f\017\uff7f\107\207\001\002\000\100\004\025\006" +
    "\057\010\064\012\024\021\034\030\042\041\036\043\077" +
    "\044\041\045\040\050\076\054\020\062\056\063\021\064" +
    "\023\065\073\066\051\067\061\070\074\071\007\100\067" +
    "\101\015\102\037\103\022\104\063\105\027\106\060\107" +
    "\113\110\013\111\100\112\050\001\002\000\144\002\uffd5" +
    "\004\uffd5\005\uffd5\006\123\007\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\021\uffd5\030\uffd5" +
    "\041\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5" +
    "\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110" +
    "\uffd5\111\uffd5\112\uffd5\001\002\000\006\005\215\017\216" +
    "\001\002\000\010\005\uff7f\016\210\017\uff7f\001\002\000" +
    "\004\107\213\001\002\000\010\005\uffd3\017\uffd3\047\uffd3" +
    "\001\002\000\010\005\uffd0\017\uffd0\047\uffd0\001\002\000" +
    "\012\005\uff7f\016\210\017\uff7f\047\uff7f\001\002\000\010" +
    "\005\uffd1\017\uffd1\047\uffd1\001\002\000\100\004\025\006" +
    "\057\010\064\012\024\021\034\030\042\041\036\043\077" +
    "\044\041\045\040\050\076\054\020\062\056\063\021\064" +
    "\023\065\073\066\051\067\061\070\074\071\007\100\067" +
    "\101\015\102\037\103\022\104\063\105\027\106\060\107" +
    "\113\110\013\111\100\112\050\001\002\000\004\107\217" +
    "\001\002\000\004\005\220\001\002\000\100\004\025\006" +
    "\057\010\064\012\024\021\034\030\042\041\036\043\077" +
    "\044\041\045\040\050\076\054\020\062\056\063\021\064" +
    "\023\065\073\066\051\067\061\070\074\071\007\100\067" +
    "\101\015\102\037\103\022\104\063\105\027\106\060\107" +
    "\113\110\013\111\100\112\050\001\002\000\144\002\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\021\uffd4\030\uffd4" +
    "\041\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110" +
    "\uffd4\111\uffd4\112\uffd4\001\002\000\144\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\021\uffd6\030\uffd6\041\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6" +
    "\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111" +
    "\uffd6\112\uffd6\001\002\000\006\005\uff7f\107\227\001\002" +
    "\000\004\005\uffd9\001\002\000\006\005\uff7f\016\234\001" +
    "\002\000\004\005\232\001\002\000\004\031\230\001\002" +
    "\000\100\004\025\006\057\010\064\012\024\021\034\030" +
    "\042\041\036\043\077\044\041\045\040\050\076\054\020" +
    "\062\056\063\021\064\023\065\073\066\051\067\061\070" +
    "\074\071\007\100\067\101\015\102\037\103\022\104\063" +
    "\105\027\106\060\107\113\110\013\111\100\112\050\001" +
    "\002\000\010\005\uffdb\006\123\016\uffdb\001\002\000\100" +
    "\004\025\006\057\010\064\012\024\021\034\030\042\041" +
    "\036\043\077\044\041\045\040\050\076\054\020\062\056" +
    "\063\021\064\023\065\073\066\051\067\061\070\074\071" +
    "\007\100\067\101\015\102\037\103\022\104\063\105\027" +
    "\106\060\107\113\110\013\111\100\112\050\001\002\000" +
    "\144\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\021" +
    "\uffdc\030\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\070\uffdc\071\uffdc\076\uffdc\077\uffdc\100" +
    "\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc" +
    "\107\uffdc\110\uffdc\111\uffdc\112\uffdc\001\002\000\004\107" +
    "\227\001\002\000\004\005\uffd7\001\002\000\004\005\uffda" +
    "\001\002\000\006\005\uff7f\016\234\001\002\000\004\005" +
    "\uffd8\001\002\000\004\004\242\001\002\000\100\004\025" +
    "\006\057\010\064\012\024\021\034\030\042\041\036\043" +
    "\077\044\041\045\040\050\076\054\020\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\100" +
    "\067\101\015\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\006\006" +
    "\123\016\244\001\002\000\100\004\025\006\057\010\064" +
    "\012\024\021\034\030\042\041\036\043\077\044\041\045" +
    "\040\050\076\054\020\062\056\063\021\064\023\065\073" +
    "\066\051\067\061\070\074\071\007\100\067\101\015\102" +
    "\037\103\022\104\063\105\027\106\060\107\113\110\013" +
    "\111\100\112\050\001\002\000\006\005\246\006\123\001" +
    "\002\000\144\002\uff95\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\021\uff95\030\uff95\041\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054" +
    "\uff95\055\uff95\056\uff95\057\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\076\uff95\077" +
    "\uff95\100\uff95\101\uff95\102\uff95\103\uff95\104\uff95\105\uff95" +
    "\106\uff95\107\uff95\110\uff95\111\uff95\112\uff95\001\002\000" +
    "\102\004\025\005\uff7f\006\057\010\064\012\024\021\034" +
    "\030\042\041\036\043\077\044\041\045\040\050\076\054" +
    "\020\062\056\063\021\064\023\065\073\066\051\067\061" +
    "\070\074\071\007\100\067\101\015\102\037\103\022\104" +
    "\063\105\027\106\060\107\113\110\013\111\100\112\050" +
    "\001\002\000\006\005\uff8d\007\uff8d\001\002\000\012\005" +
    "\uff7f\006\123\007\uff7f\016\254\001\002\000\004\005\253" +
    "\001\002\000\144\002\uff91\004\uff91\005\uff91\006\uff91\007" +
    "\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91" +
    "\016\uff91\021\uff91\030\uff91\041\uff91\043\uff91\044\uff91\045" +
    "\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91" +
    "\054\uff91\055\uff91\056\uff91\057\uff91\062\uff91\063\uff91\064" +
    "\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91\076\uff91" +
    "\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105" +
    "\uff91\106\uff91\107\uff91\110\uff91\111\uff91\112\uff91\001\002" +
    "\000\100\004\025\006\057\010\064\012\024\021\034\030" +
    "\042\041\036\043\077\044\041\045\040\050\076\054\020" +
    "\062\056\063\021\064\023\065\073\066\051\067\061\070" +
    "\074\071\007\100\067\101\015\102\037\103\022\104\063" +
    "\105\027\106\060\107\113\110\013\111\100\112\050\001" +
    "\002\000\006\005\uff8e\007\uff8e\001\002\000\006\005\uff8b" +
    "\007\uff8b\001\002\000\012\005\uff7f\006\123\007\uff7f\016" +
    "\254\001\002\000\006\005\uff8c\007\uff8c\001\002\000\006" +
    "\006\123\057\262\001\002\000\100\004\025\006\057\010" +
    "\064\012\024\021\034\030\042\041\036\043\077\044\041" +
    "\045\040\050\076\054\020\062\056\063\021\064\023\065" +
    "\073\066\051\067\061\070\074\071\007\100\067\101\015" +
    "\102\037\103\022\104\063\105\027\106\060\107\113\110" +
    "\013\111\100\112\050\001\002\000\122\002\uffdd\004\uffdd" +
    "\006\123\010\uffdd\011\uffdd\012\uffdd\021\uffdd\030\uffdd\041" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\054\uffdd\055\uffdd\056\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\076\uffdd" +
    "\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105" +
    "\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\001\002" +
    "\000\042\004\141\021\034\045\040\063\021\064\023\066" +
    "\051\071\007\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\204\002" +
    "\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac" +
    "\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\062\uffac\063\uffac" +
    "\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\076" +
    "\uffac\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac" +
    "\105\uffac\106\uffac\107\uffac\110\uffac\111\uffac\112\uffac\001" +
    "\002\000\004\005\267\001\002\000\144\002\uff81\004\uff81" +
    "\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013" +
    "\uff81\014\uff81\015\uff81\016\uff81\021\uff81\030\uff81\041\uff81" +
    "\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051" +
    "\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81" +
    "\062\uff81\063\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070" +
    "\uff81\071\uff81\076\uff81\077\uff81\100\uff81\101\uff81\102\uff81" +
    "\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81\110\uff81\111" +
    "\uff81\112\uff81\001\002\000\100\004\025\006\057\010\064" +
    "\012\024\021\034\030\042\041\036\043\077\044\041\045" +
    "\040\050\076\054\020\062\056\063\021\064\023\065\073" +
    "\066\051\067\061\070\074\071\007\100\067\101\015\102" +
    "\037\103\022\104\063\105\027\106\060\107\113\110\013" +
    "\111\100\112\050\001\002\000\100\004\025\006\057\010" +
    "\064\012\024\021\034\030\042\041\036\043\077\044\041" +
    "\045\040\050\076\054\020\062\056\063\021\064\023\065" +
    "\073\066\051\067\061\070\074\071\007\100\067\101\015" +
    "\102\037\103\022\104\063\105\027\106\060\107\113\110" +
    "\013\111\100\112\050\001\002\000\100\004\025\006\057" +
    "\010\064\012\024\021\034\030\042\041\036\043\077\044" +
    "\041\045\040\050\076\054\020\062\056\063\021\064\023" +
    "\065\073\066\051\067\061\070\074\071\007\100\067\101" +
    "\015\102\037\103\022\104\063\105\027\106\060\107\113" +
    "\110\013\111\100\112\050\001\002\000\006\005\ufff3\014" +
    "\ufff3\001\002\000\006\005\ufff1\014\ufff1\001\002\000\006" +
    "\006\123\014\276\001\002\000\122\002\ufff6\004\ufff6\006" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\021\ufff6\030\ufff6\041\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\062\ufff6\063\ufff6\064\ufff6" +
    "\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\076\ufff6\077" +
    "\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6" +
    "\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6\001\002\000" +
    "\010\005\ufff0\006\123\014\ufff0\001\002\000\010\005\ufff2" +
    "\006\123\014\ufff2\001\002\000\122\002\ufffb\004\ufffb\006" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\021\ufffb\030\ufffb\041\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\076\ufffb\077" +
    "\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb" +
    "\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb\001\002\000" +
    "\120\004\025\006\057\010\064\011\303\012\024\021\034" +
    "\030\042\041\036\043\077\044\041\045\040\046\101\047" +
    "\uff7f\050\076\051\045\054\020\055\033\056\072\062\056" +
    "\063\021\064\023\065\073\066\051\067\061\070\074\071" +
    "\007\076\106\077\030\100\067\101\015\102\037\103\022" +
    "\104\063\105\027\106\060\107\066\110\013\111\100\112" +
    "\050\001\002\000\144\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\021\uffee\030\uffee\041\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\076" +
    "\uffee\077\uffee\100\uffee\101\uffee\102\uffee\103\uffee\104\uffee" +
    "\105\uffee\106\uffee\107\uffee\110\uffee\111\uffee\112\uffee\001" +
    "\002\000\122\002\uffff\004\uffff\006\uffff\010\uffff\011\uffff" +
    "\012\uffff\021\uffff\030\uffff\041\uffff\043\uffff\044\uffff\045" +
    "\uffff\046\uffff\047\uffff\050\uffff\051\uffff\054\uffff\055\uffff" +
    "\056\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067" +
    "\uffff\070\uffff\071\uffff\076\uffff\077\uffff\100\uffff\101\uffff" +
    "\102\uffff\103\uffff\104\uffff\105\uffff\106\uffff\107\uffff\110" +
    "\uffff\111\uffff\112\uffff\001\002\000\004\004\306\001\002" +
    "\000\100\004\025\006\057\010\064\012\024\021\034\030" +
    "\042\041\036\043\077\044\041\045\040\050\076\054\020" +
    "\062\056\063\021\064\023\065\073\066\051\067\061\070" +
    "\074\071\007\100\067\101\015\102\037\103\022\104\063" +
    "\105\027\106\060\107\113\110\013\111\100\112\050\001" +
    "\002\000\006\006\123\016\310\001\002\000\100\004\025" +
    "\006\057\010\064\012\024\021\034\030\042\041\036\043" +
    "\077\044\041\045\040\050\076\054\020\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\100" +
    "\067\101\015\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\006\005" +
    "\312\006\123\001\002\000\144\002\uff96\004\uff96\005\uff96" +
    "\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\uff96\021\uff96\030\uff96\041\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\062\uff96" +
    "\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071" +
    "\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96" +
    "\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112" +
    "\uff96\001\002\000\004\007\314\001\002\000\144\002\uff90" +
    "\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\013\uff90\014\uff90\015\uff90\016\uff90\021\uff90\030\uff90" +
    "\041\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90" +
    "\057\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067" +
    "\uff90\070\uff90\071\uff90\076\uff90\077\uff90\100\uff90\101\uff90" +
    "\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110" +
    "\uff90\111\uff90\112\uff90\001\002\000\004\004\323\001\002" +
    "\000\100\004\025\006\057\010\064\012\024\021\034\030" +
    "\042\041\036\043\077\044\041\045\040\050\076\054\020" +
    "\062\056\063\021\064\023\065\073\066\051\067\061\070" +
    "\074\071\007\100\067\101\015\102\037\103\022\104\063" +
    "\105\027\106\060\107\113\110\013\111\100\112\050\001" +
    "\002\000\006\006\123\016\320\001\002\000\100\004\025" +
    "\006\057\010\064\012\024\021\034\030\042\041\036\043" +
    "\077\044\041\045\040\050\076\054\020\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\100" +
    "\067\101\015\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\006\005" +
    "\322\006\123\001\002\000\144\002\uff92\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\021\uff92\030\uff92\041\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\062\uff92" +
    "\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92\071" +
    "\uff92\076\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92" +
    "\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92\111\uff92\112" +
    "\uff92\001\002\000\100\004\025\006\057\010\064\012\024" +
    "\021\034\030\042\041\036\043\077\044\041\045\040\050" +
    "\076\054\020\062\056\063\021\064\023\065\073\066\051" +
    "\067\061\070\074\071\007\100\067\101\015\102\037\103" +
    "\022\104\063\105\027\106\060\107\113\110\013\111\100" +
    "\112\050\001\002\000\006\005\325\006\123\001\002\000" +
    "\144\002\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97" +
    "\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\021" +
    "\uff97\030\uff97\041\uff97\043\uff97\044\uff97\045\uff97\046\uff97" +
    "\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055" +
    "\uff97\056\uff97\057\uff97\062\uff97\063\uff97\064\uff97\065\uff97" +
    "\066\uff97\067\uff97\070\uff97\071\uff97\076\uff97\077\uff97\100" +
    "\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97\106\uff97" +
    "\107\uff97\110\uff97\111\uff97\112\uff97\001\002\000\100\004" +
    "\025\006\057\010\064\012\024\021\034\030\042\041\036" +
    "\043\077\044\041\045\040\050\076\054\020\062\056\063" +
    "\021\064\023\065\073\066\051\067\061\070\074\071\007" +
    "\100\067\101\015\102\037\103\022\104\063\105\027\106" +
    "\060\107\113\110\013\111\100\112\050\001\002\000\006" +
    "\005\330\006\123\001\002\000\204\002\uffa5\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\067\uffa5\070\uffa5\071\uffa5\076\uffa5\077\uffa5\100" +
    "\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5" +
    "\107\uffa5\110\uffa5\111\uffa5\112\uffa5\001\002\000\122\002" +
    "\ufffa\004\ufffa\006\ufffa\010\ufffa\011\ufffa\012\ufffa\021\ufffa" +
    "\030\ufffa\041\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\054\ufffa\055\ufffa\056\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071" +
    "\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa" +
    "\104\ufffa\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\112" +
    "\ufffa\001\002\000\044\004\141\021\034\030\042\045\040" +
    "\063\021\064\023\066\051\071\007\102\037\103\022\104" +
    "\063\105\027\106\060\107\113\110\013\111\100\112\050" +
    "\001\002\000\044\004\141\021\034\030\042\045\040\063" +
    "\021\064\023\066\051\071\007\102\037\103\022\104\063" +
    "\105\027\106\060\107\113\110\013\111\100\112\050\001" +
    "\002\000\152\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\020\146\021\147\030\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111" +
    "\uffc2\112\uffc2\001\002\000\164\002\uffc3\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\021\uffc3\030\uffc3\031\134\032\135" +
    "\033\133\034\137\035\136\036\140\037\uffc3\040\uffc3\041" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102" +
    "\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3" +
    "\111\uffc3\112\uffc3\001\002\000\006\006\123\052\337\001" +
    "\002\000\100\004\025\006\057\010\064\012\024\021\034" +
    "\030\042\041\036\043\077\044\041\045\040\050\076\054" +
    "\020\062\056\063\021\064\023\065\073\066\051\067\061" +
    "\070\074\071\007\100\067\101\015\102\037\103\022\104" +
    "\063\105\027\106\060\107\113\110\013\111\100\112\050" +
    "\001\002\000\124\002\uffc7\004\uffc7\006\123\010\uffc7\011" +
    "\uffc7\012\uffc7\021\uffc7\030\uffc7\041\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\053\341\054" +
    "\uffc7\055\uffc7\056\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\071\uffc7\076\uffc7\077\uffc7\100" +
    "\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7" +
    "\107\uffc7\110\uffc7\111\uffc7\112\uffc7\001\002\000\100\004" +
    "\025\006\057\010\064\012\024\021\034\030\042\041\036" +
    "\043\077\044\041\045\040\050\076\054\020\062\056\063" +
    "\021\064\023\065\073\066\051\067\061\070\074\071\007" +
    "\100\067\101\015\102\037\103\022\104\063\105\027\106" +
    "\060\107\113\110\013\111\100\112\050\001\002\000\122" +
    "\002\uffc6\004\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\021" +
    "\uffc6\030\uffc6\041\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\054\uffc6\055\uffc6\056\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103" +
    "\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6" +
    "\112\uffc6\001\002\000\202\002\uffae\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae" +
    "\070\uffae\071\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102" +
    "\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae" +
    "\111\uffae\112\uffae\001\002\000\100\004\025\006\057\010" +
    "\064\012\024\021\034\030\042\041\036\043\077\044\041" +
    "\045\040\050\076\054\020\062\056\063\021\064\023\065" +
    "\073\066\051\067\061\070\074\071\007\100\067\101\015" +
    "\102\037\103\022\104\063\105\027\106\060\107\113\110" +
    "\013\111\100\112\050\001\002\000\006\006\123\016\346" +
    "\001\002\000\100\004\025\006\057\010\064\012\024\021" +
    "\034\030\042\041\036\043\077\044\041\045\040\050\076" +
    "\054\020\062\056\063\021\064\023\065\073\066\051\067" +
    "\061\070\074\071\007\100\067\101\015\102\037\103\022" +
    "\104\063\105\027\106\060\107\113\110\013\111\100\112" +
    "\050\001\002\000\006\005\350\006\123\001\002\000\144" +
    "\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\021\uffc8" +
    "\030\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\076\uffc8\077\uffc8\100\uffc8" +
    "\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107" +
    "\uffc8\110\uffc8\111\uffc8\112\uffc8\001\002\000\100\004\025" +
    "\006\057\010\064\012\024\021\034\030\042\041\036\043" +
    "\077\044\041\045\040\050\076\054\020\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\100" +
    "\067\101\015\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\006\005" +
    "\353\006\123\001\002\000\204\002\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107" +
    "\uffc5\110\uffc5\111\uffc5\112\uffc5\001\002\000\164\002\uffc4" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\021\uffc4\030\uffc4" +
    "\031\134\032\135\033\133\034\137\035\136\036\140\037" +
    "\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\071\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4" +
    "\107\uffc4\110\uffc4\111\uffc4\112\uffc4\001\002\000\204\002" +
    "\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\076" +
    "\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0" +
    "\105\uffa0\106\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0\001" +
    "\002\000\006\046\101\107\360\001\002\000\100\004\025" +
    "\006\057\010\064\012\024\021\034\030\042\041\036\043" +
    "\077\044\041\045\040\050\076\054\020\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\100" +
    "\067\101\015\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\004\047" +
    "\272\001\002\000\006\006\123\014\362\001\002\000\004" +
    "\107\364\001\002\000\004\005\365\001\002\000\012\072" +
    "\273\073\274\074\270\075\271\001\002\000\100\004\025" +
    "\006\057\010\064\012\024\021\034\030\042\041\036\043" +
    "\077\044\041\045\040\050\076\054\020\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\100" +
    "\067\101\015\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\122\002" +
    "\uffde\004\uffde\006\uffde\010\uffde\011\uffde\012\uffde\021\uffde" +
    "\030\uffde\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\054\uffde\055\uffde\056\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071" +
    "\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde" +
    "\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde\112" +
    "\uffde\001\002\000\100\004\025\006\057\010\064\012\024" +
    "\021\034\030\042\041\036\043\077\044\041\045\040\050" +
    "\076\054\020\062\056\063\021\064\023\065\073\066\051" +
    "\067\061\070\074\071\007\100\067\101\015\102\037\103" +
    "\022\104\063\105\027\106\060\107\113\110\013\111\100" +
    "\112\050\001\002\000\006\005\371\006\123\001\002\000" +
    "\004\014\372\001\002\000\122\002\uff82\004\uff82\006\uff82" +
    "\010\uff82\011\uff82\012\uff82\021\uff82\030\uff82\041\uff82\043" +
    "\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82" +
    "\054\uff82\055\uff82\056\uff82\062\uff82\063\uff82\064\uff82\065" +
    "\uff82\066\uff82\067\uff82\070\uff82\071\uff82\076\uff82\077\uff82" +
    "\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106" +
    "\uff82\107\uff82\110\uff82\111\uff82\112\uff82\001\002\000\010" +
    "\005\164\006\123\016\254\001\002\000\004\005\375\001" +
    "\002\000\144\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\021\uffe6\030\uffe6\041\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\076\uffe6\077" +
    "\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6" +
    "\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6\001\002\000" +
    "\004\013\uff86\001\002\000\006\013\uff7f\016\u0107\001\002" +
    "\000\012\006\123\013\uff7f\015\u0104\016\uff7f\001\002\000" +
    "\004\013\u0102\001\002\000\144\002\uff8f\004\uff8f\005\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014" +
    "\uff8f\015\uff8f\016\uff8f\021\uff8f\030\uff8f\041\uff8f\043\uff8f" +
    "\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\062\uff8f" +
    "\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071" +
    "\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f" +
    "\104\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f\111\uff8f\112" +
    "\uff8f\001\002\000\006\013\uff8a\016\uff8a\001\002\000\100" +
    "\004\025\006\057\010\064\012\024\021\034\030\042\041" +
    "\036\043\077\044\041\045\040\050\076\054\020\062\056" +
    "\063\021\064\023\065\073\066\051\067\061\070\074\071" +
    "\007\100\067\101\015\102\037\103\022\104\063\105\027" +
    "\106\060\107\113\110\013\111\100\112\050\001\002\000" +
    "\006\013\uff88\016\uff88\001\002\000\010\006\123\013\uff89" +
    "\016\uff89\001\002\000\100\004\025\006\057\010\064\012" +
    "\024\021\034\030\042\041\036\043\077\044\041\045\040" +
    "\050\076\054\020\062\056\063\021\064\023\065\073\066" +
    "\051\067\061\070\074\071\007\100\067\101\015\102\037" +
    "\103\022\104\063\105\027\106\060\107\113\110\013\111" +
    "\100\112\050\001\002\000\004\013\uff87\001\002\000\004" +
    "\013\uff84\001\002\000\006\013\uff7f\016\u0107\001\002\000" +
    "\004\013\uff85\001\002\000\100\004\025\006\057\010\064" +
    "\012\024\021\034\030\042\041\036\043\077\044\041\045" +
    "\040\050\076\054\020\062\056\063\021\064\023\065\073" +
    "\066\051\067\061\070\074\071\007\100\067\101\015\102" +
    "\037\103\022\104\063\105\027\106\060\107\113\110\013" +
    "\111\100\112\050\001\002\000\006\005\u010e\006\123\001" +
    "\002\000\204\002\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070" +
    "\uffa6\071\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6" +
    "\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\111" +
    "\uffa6\112\uffa6\001\002\000\100\004\025\006\057\010\064" +
    "\012\024\021\034\030\042\041\036\043\077\044\041\045" +
    "\040\050\076\054\020\062\056\063\021\064\023\065\073" +
    "\066\051\067\061\070\074\071\007\100\067\101\015\102" +
    "\037\103\022\104\063\105\027\106\060\107\113\110\013" +
    "\111\100\112\050\001\002\000\006\005\u0111\006\123\001" +
    "\002\000\204\002\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7" +
    "\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111" +
    "\uffa7\112\uffa7\001\002\000\104\004\025\006\057\010\064" +
    "\011\uff7f\012\024\021\034\030\042\041\036\043\077\044" +
    "\041\045\040\050\076\053\u0116\054\020\062\056\063\021" +
    "\064\023\065\073\066\051\067\061\070\074\071\007\100" +
    "\067\101\015\102\037\103\022\104\063\105\027\106\060" +
    "\107\113\110\013\111\100\112\050\001\002\000\004\011" +
    "\uffe1\001\002\000\004\011\u0121\001\002\000\006\006\123" +
    "\015\u011f\001\002\000\004\015\u011d\001\002\000\006\011" +
    "\uff7f\016\u0118\001\002\000\102\004\025\006\057\010\064" +
    "\012\024\021\034\030\042\041\036\043\077\044\041\045" +
    "\040\050\076\053\u0116\054\020\062\056\063\021\064\023" +
    "\065\073\066\051\067\061\070\074\071\007\100\067\101" +
    "\015\102\037\103\022\104\063\105\027\106\060\107\113" +
    "\110\013\111\100\112\050\001\002\000\004\011\uffdf\001" +
    "\002\000\004\011\uffe2\001\002\000\006\011\uff7f\016\u0118" +
    "\001\002\000\004\011\uffe0\001\002\000\100\004\025\006" +
    "\057\010\064\012\024\021\034\030\042\041\036\043\077" +
    "\044\041\045\040\050\076\054\020\062\056\063\021\064" +
    "\023\065\073\066\051\067\061\070\074\071\007\100\067" +
    "\101\015\102\037\103\022\104\063\105\027\106\060\107" +
    "\113\110\013\111\100\112\050\001\002\000\010\006\123" +
    "\011\uffe3\016\uffe3\001\002\000\100\004\025\006\057\010" +
    "\064\012\024\021\034\030\042\041\036\043\077\044\041" +
    "\045\040\050\076\054\020\062\056\063\021\064\023\065" +
    "\073\066\051\067\061\070\074\071\007\100\067\101\015" +
    "\102\037\103\022\104\063\105\027\106\060\107\113\110" +
    "\013\111\100\112\050\001\002\000\010\006\123\011\uffe4" +
    "\016\uffe4\001\002\000\144\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\021\uffe5\030\uffe5\041\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\062\uffe5\063" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104" +
    "\uffe5\105\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5" +
    "\001\002\000\004\005\u0123\001\002\000\144\002\uff80\004" +
    "\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80" +
    "\013\uff80\014\uff80\015\uff80\016\uff80\021\uff80\030\uff80\041" +
    "\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80" +
    "\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057" +
    "\uff80\062\uff80\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80" +
    "\070\uff80\071\uff80\076\uff80\077\uff80\100\uff80\101\uff80\102" +
    "\uff80\103\uff80\104\uff80\105\uff80\106\uff80\107\uff80\110\uff80" +
    "\111\uff80\112\uff80\001\002\000\100\004\025\006\057\010" +
    "\064\012\024\021\034\030\042\041\036\043\077\044\041" +
    "\045\040\050\076\054\020\062\056\063\021\064\023\065" +
    "\073\066\051\067\061\070\074\071\007\100\067\101\015" +
    "\102\037\103\022\104\063\105\027\106\060\107\113\110" +
    "\013\111\100\112\050\001\002\000\006\006\123\014\u0126" +
    "\001\002\000\122\002\ufff4\004\ufff4\006\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\021\ufff4\030\ufff4\041\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\076\ufff4\077\ufff4\100\ufff4\101" +
    "\ufff4\102\ufff4\103\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4" +
    "\110\ufff4\111\ufff4\112\ufff4\001\002\000\100\004\025\006" +
    "\057\010\064\012\024\021\034\030\042\041\036\043\077" +
    "\044\041\045\040\050\076\054\020\062\056\063\021\064" +
    "\023\065\073\066\051\067\061\070\074\071\007\100\067" +
    "\101\015\102\037\103\022\104\063\105\027\106\060\107" +
    "\113\110\013\111\100\112\050\001\002\000\006\006\123" +
    "\016\u0129\001\002\000\100\004\025\006\057\010\064\012" +
    "\024\021\034\030\042\041\036\043\077\044\041\045\040" +
    "\050\076\054\020\062\056\063\021\064\023\065\073\066" +
    "\051\067\061\070\074\071\007\100\067\101\015\102\037" +
    "\103\022\104\063\105\027\106\060\107\113\110\013\111" +
    "\100\112\050\001\002\000\006\006\123\016\u012b\001\002" +
    "\000\100\004\025\006\057\010\064\012\024\021\034\030" +
    "\042\041\036\043\077\044\041\045\040\050\076\054\020" +
    "\062\056\063\021\064\023\065\073\066\051\067\061\070" +
    "\074\071\007\100\067\101\015\102\037\103\022\104\063" +
    "\105\027\106\060\107\113\110\013\111\100\112\050\001" +
    "\002\000\006\005\u012d\006\123\001\002\000\204\002\uffa4" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\062\uffa4\063\uffa4\064" +
    "\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\076\uffa4" +
    "\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\102\002\004\003\011\004\106\005\016\006" +
    "\005\007\042\013\046\014\025\015\067\016\043\017\051" +
    "\026\034\027\031\030\007\032\102\035\070\036\030\037" +
    "\013\040\064\041\054\042\104\046\045\047\103\050\015" +
    "\051\061\052\052\053\010\054\101\055\107\056\074\057" +
    "\053\060\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\004\303\005\016\006\005\007\042" +
    "\013\046\014\025\015\067\016\043\017\051\026\034\027" +
    "\031\030\007\032\102\035\070\036\030\037\013\040\064" +
    "\041\054\042\104\046\045\047\103\050\015\051\061\052" +
    "\052\053\010\054\101\055\107\056\074\057\053\060\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\007\042\013\377\014\025\015\067\016\043\017\051" +
    "\022\376\024\u0100\026\034\027\031\032\102\035\070\041" +
    "\054\042\104\046\045\047\103\050\015\051\061\052\052" +
    "\053\010\054\101\055\107\057\053\060\375\001\001\000" +
    "\060\007\042\013\372\014\025\015\067\016\043\017\051" +
    "\020\373\026\034\027\031\032\102\035\070\041\054\042" +
    "\104\046\045\047\103\050\015\051\061\052\052\053\010" +
    "\054\101\055\107\057\053\060\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\025\026" +
    "\034\032\102\054\354\055\107\001\001\000\002\001\001" +
    "\000\030\014\025\015\067\026\034\032\102\047\353\050" +
    "\015\051\061\052\052\053\010\054\101\055\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\025\026\034\032\102\054\342\055\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\007\042\013" +
    "\335\014\025\015\067\016\043\017\051\026\034\027\031" +
    "\032\102\035\070\041\054\042\104\046\045\047\103\050" +
    "\015\051\061\052\052\053\010\054\101\055\107\057\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\007\042\013\250\014\025\015\067\016\043\017\051" +
    "\020\312\026\034\027\031\032\102\035\070\041\054\042" +
    "\104\046\045\047\103\050\015\051\061\052\052\053\010" +
    "\054\101\055\107\057\053\060\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\003\301\004\106\005\016\006\005\007\042\013" +
    "\046\014\025\015\067\016\043\017\051\026\034\027\031" +
    "\030\007\032\102\035\070\036\030\037\013\040\064\041" +
    "\054\042\104\046\045\047\103\050\015\051\061\052\052" +
    "\053\010\054\101\055\107\056\074\057\053\060\003\001" +
    "\001\000\002\001\001\000\006\031\210\060\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\007\042\013\260\014\025\015\067\016\043\017\051" +
    "\026\034\027\031\032\102\035\070\041\054\042\104\046" +
    "\045\047\103\050\015\051\061\052\052\053\010\054\101" +
    "\055\107\057\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\007" +
    "\042\013\111\014\025\015\067\016\043\017\051\026\034" +
    "\027\031\032\102\035\070\041\054\042\104\046\045\047" +
    "\103\050\015\051\061\052\052\053\010\054\101\055\107" +
    "\057\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\007\042\013\115\014\025\015\067\016\043\017\051" +
    "\026\034\027\031\032\102\033\116\035\070\041\054\042" +
    "\104\046\045\047\103\050\015\051\061\052\052\053\010" +
    "\054\101\055\107\057\053\060\114\001\001\000\002\001" +
    "\001\000\006\034\121\060\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\007\042\013\126\014\025\015" +
    "\067\016\043\017\051\026\034\027\031\032\102\035\070" +
    "\041\054\042\104\046\045\047\103\050\015\051\061\052" +
    "\052\053\010\054\101\055\107\057\053\001\001\000\002" +
    "\001\001\000\054\007\042\013\124\014\025\015\067\016" +
    "\043\017\051\026\034\027\031\032\102\035\070\041\054" +
    "\042\104\046\045\047\103\050\015\051\061\052\052\053" +
    "\010\054\101\055\107\057\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\127\060" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\025\015\067\026\034\032\102\050" +
    "\173\051\061\052\052\053\010\054\101\055\107\001\001" +
    "\000\026\014\025\015\067\026\034\032\102\050\172\051" +
    "\061\052\052\053\010\054\101\055\107\001\001\000\026" +
    "\014\025\015\067\026\034\032\102\050\171\051\061\052" +
    "\052\053\010\054\101\055\107\001\001\000\026\014\025" +
    "\015\067\026\034\032\102\050\170\051\061\052\052\053" +
    "\010\054\101\055\107\001\001\000\026\014\025\015\067" +
    "\026\034\032\102\050\167\051\061\052\052\053\010\054" +
    "\101\055\107\001\001\000\026\014\025\015\067\026\034" +
    "\032\102\050\141\051\061\052\052\053\010\054\101\055" +
    "\107\001\001\000\054\007\042\013\162\014\025\015\067" +
    "\016\043\017\051\026\034\027\031\032\102\035\070\041" +
    "\054\042\104\046\045\047\103\050\015\051\061\052\052" +
    "\053\010\054\101\055\107\057\053\001\001\000\002\001" +
    "\001\000\024\014\025\015\067\026\034\032\102\051\161" +
    "\052\052\053\010\054\101\055\107\001\001\000\024\014" +
    "\025\015\067\026\034\032\102\051\144\052\052\053\010" +
    "\054\101\055\107\001\001\000\002\001\001\000\022\014" +
    "\025\015\067\026\034\032\102\052\160\053\010\054\101" +
    "\055\107\001\001\000\022\014\025\015\067\026\034\032" +
    "\102\052\147\053\010\054\101\055\107\001\001\000\002" +
    "\001\001\000\020\014\025\015\067\026\034\032\102\053" +
    "\157\054\101\055\107\001\001\000\020\014\025\015\067" +
    "\026\034\032\102\053\156\054\101\055\107\001\001\000" +
    "\020\014\025\015\067\026\034\032\102\053\155\054\101" +
    "\055\107\001\001\000\020\014\025\015\067\026\034\032" +
    "\102\053\154\054\101\055\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\007\042\013\115\014\025\015\067\016" +
    "\043\017\051\026\034\027\031\032\102\033\165\035\070" +
    "\041\054\042\104\046\045\047\103\050\015\051\061\052" +
    "\052\053\010\054\101\055\107\057\053\060\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\007\042\013\115\014\025\015\067\016" +
    "\043\017\051\026\034\027\031\032\102\033\175\035\070" +
    "\041\054\042\104\046\045\047\103\050\015\051\061\052" +
    "\052\053\010\054\101\055\107\057\053\060\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\007\042\013" +
    "\200\014\025\015\067\016\043\017\051\026\034\027\031" +
    "\032\102\035\070\041\054\042\104\046\045\047\103\050" +
    "\015\051\061\052\052\053\010\054\101\055\107\057\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\205\060\003\001\001\000\054\007\042\013\204\014\025" +
    "\015\067\016\043\017\051\026\034\027\031\032\102\035" +
    "\070\041\054\042\104\046\045\047\103\050\015\051\061" +
    "\052\052\053\010\054\101\055\107\057\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\210\060\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\213\060\211\001\001\000\002\001\001" +
    "\000\054\007\042\013\221\014\025\015\067\016\043\017" +
    "\051\026\034\027\031\032\102\035\070\041\054\042\104" +
    "\046\045\047\103\050\015\051\061\052\052\053\010\054" +
    "\101\055\107\057\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\007\042\013\220\014\025\015\067\016" +
    "\043\017\051\026\034\027\031\032\102\035\070\041\054" +
    "\042\104\046\045\047\103\050\015\051\061\052\052\053" +
    "\010\054\101\055\107\057\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\225\012\224\060\223\001" +
    "\001\000\002\001\001\000\006\011\235\060\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\007\042\013" +
    "\230\014\025\015\067\016\043\017\051\026\034\027\031" +
    "\032\102\035\070\041\054\042\104\046\045\047\103\050" +
    "\015\051\061\052\052\053\010\054\101\055\107\057\053" +
    "\001\001\000\002\001\001\000\054\007\042\013\232\014" +
    "\025\015\067\016\043\017\051\026\034\027\031\032\102" +
    "\035\070\041\054\042\104\046\045\047\103\050\015\051" +
    "\061\052\052\053\010\054\101\055\107\057\053\001\001" +
    "\000\002\001\001\000\004\012\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\237\060\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\007\042\013" +
    "\242\014\025\015\067\016\043\017\051\026\034\027\031" +
    "\032\102\035\070\041\054\042\104\046\045\047\103\050" +
    "\015\051\061\052\052\053\010\054\101\055\107\057\053" +
    "\001\001\000\002\001\001\000\054\007\042\013\244\014" +
    "\025\015\067\016\043\017\051\026\034\027\031\032\102" +
    "\035\070\041\054\042\104\046\045\047\103\050\015\051" +
    "\061\052\052\053\010\054\101\055\107\057\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\007\042\013" +
    "\250\014\025\015\067\016\043\017\051\020\251\026\034" +
    "\027\031\032\102\035\070\041\054\042\104\046\045\047" +
    "\103\050\015\051\061\052\052\053\010\054\101\055\107" +
    "\057\053\060\247\001\001\000\002\001\001\000\006\021" +
    "\254\060\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\042\013\256\014\025\015\067\016\043\017" +
    "\051\026\034\027\031\032\102\035\070\041\054\042\104" +
    "\046\045\047\103\050\015\051\061\052\052\053\010\054" +
    "\101\055\107\057\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\257\060\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\007\042\013\262\014\025" +
    "\015\067\016\043\017\051\026\034\027\031\032\102\035" +
    "\070\041\054\042\104\046\045\047\103\050\015\051\061" +
    "\052\052\053\010\054\101\055\107\057\053\001\001\000" +
    "\002\001\001\000\014\014\025\026\034\032\102\054\264" +
    "\055\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\007\042\013\277\014\025\015\067" +
    "\016\043\017\051\026\034\027\031\032\102\035\070\041" +
    "\054\042\104\046\045\047\103\050\015\051\061\052\052" +
    "\053\010\054\101\055\107\057\053\001\001\000\054\007" +
    "\042\013\276\014\025\015\067\016\043\017\051\026\034" +
    "\027\031\032\102\035\070\041\054\042\104\046\045\047" +
    "\103\050\015\051\061\052\052\053\010\054\101\055\107" +
    "\057\053\001\001\000\054\007\042\013\274\014\025\015" +
    "\067\016\043\017\051\026\034\027\031\032\102\035\070" +
    "\041\054\042\104\046\045\047\103\050\015\051\061\052" +
    "\052\053\010\054\101\055\107\057\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\004\303\005\016\006\005\007\042\013\046\014" +
    "\025\015\067\016\043\017\051\026\034\027\031\030\007" +
    "\032\102\035\070\036\030\037\013\040\064\041\054\042" +
    "\104\046\045\047\103\050\015\051\061\052\052\053\010" +
    "\054\101\055\107\056\074\057\053\060\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\007\042\013\306\014\025\015\067\016\043\017\051\026" +
    "\034\027\031\032\102\035\070\041\054\042\104\046\045" +
    "\047\103\050\015\051\061\052\052\053\010\054\101\055" +
    "\107\057\053\001\001\000\002\001\001\000\054\007\042" +
    "\013\310\014\025\015\067\016\043\017\051\026\034\027" +
    "\031\032\102\035\070\041\054\042\104\046\045\047\103" +
    "\050\015\051\061\052\052\053\010\054\101\055\107\057" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\007" +
    "\042\013\316\014\025\015\067\016\043\017\051\026\034" +
    "\027\031\032\102\035\070\041\054\042\104\046\045\047" +
    "\103\050\015\051\061\052\052\053\010\054\101\055\107" +
    "\057\053\001\001\000\002\001\001\000\054\007\042\013" +
    "\320\014\025\015\067\016\043\017\051\026\034\027\031" +
    "\032\102\035\070\041\054\042\104\046\045\047\103\050" +
    "\015\051\061\052\052\053\010\054\101\055\107\057\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\007" +
    "\042\013\323\014\025\015\067\016\043\017\051\026\034" +
    "\027\031\032\102\035\070\041\054\042\104\046\045\047" +
    "\103\050\015\051\061\052\052\053\010\054\101\055\107" +
    "\057\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\007\042\013\326\014\025\015\067\016\043\017\051" +
    "\026\034\027\031\032\102\035\070\041\054\042\104\046" +
    "\045\047\103\050\015\051\061\052\052\053\010\054\101" +
    "\055\107\057\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\025\015\067\026\034" +
    "\032\102\047\334\050\015\051\061\052\052\053\010\054" +
    "\101\055\107\001\001\000\024\014\025\015\067\026\034" +
    "\032\102\051\333\052\052\053\010\054\101\055\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\042\013\337\014\025\015\067\016\043\017" +
    "\051\026\034\027\031\032\102\035\070\041\054\042\104" +
    "\046\045\047\103\050\015\051\061\052\052\053\010\054" +
    "\101\055\107\057\053\001\001\000\002\001\001\000\054" +
    "\007\042\013\341\014\025\015\067\016\043\017\051\026" +
    "\034\027\031\032\102\035\070\041\054\042\104\046\045" +
    "\047\103\050\015\051\061\052\052\053\010\054\101\055" +
    "\107\057\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\042\013\344\014\025\015\067\016\043\017" +
    "\051\026\034\027\031\032\102\035\070\041\054\042\104" +
    "\046\045\047\103\050\015\051\061\052\052\053\010\054" +
    "\101\055\107\057\053\001\001\000\002\001\001\000\054" +
    "\007\042\013\346\014\025\015\067\016\043\017\051\026" +
    "\034\027\031\032\102\035\070\041\054\042\104\046\045" +
    "\047\103\050\015\051\061\052\052\053\010\054\101\055" +
    "\107\057\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\042\013\351\014\025\015\067\016\043\017" +
    "\051\026\034\027\031\032\102\035\070\041\054\042\104" +
    "\046\045\047\103\050\015\051\061\052\052\053\010\054" +
    "\101\055\107\057\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\356\001\001\000\054\007\042\013\360\014\025\015\067" +
    "\016\043\017\051\026\034\027\031\032\102\035\070\041" +
    "\054\042\104\046\045\047\103\050\015\051\061\052\052" +
    "\053\010\054\101\055\107\057\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\362\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\007\042\013\365\014" +
    "\025\015\067\016\043\017\051\026\034\027\031\032\102" +
    "\035\070\041\054\042\104\046\045\047\103\050\015\051" +
    "\061\052\052\053\010\054\101\055\107\057\053\001\001" +
    "\000\002\001\001\000\054\007\042\013\367\014\025\015" +
    "\067\016\043\017\051\026\034\027\031\032\102\035\070" +
    "\041\054\042\104\046\045\047\103\050\015\051\061\052" +
    "\052\053\010\054\101\055\107\057\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\254\060\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\u0107\060\u0108\001\001\000" +
    "\006\023\u0102\060\u0104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\007\042\013\u0105\014" +
    "\025\015\067\016\043\017\051\026\034\027\031\032\102" +
    "\035\070\041\054\042\104\046\045\047\103\050\015\051" +
    "\061\052\052\053\010\054\101\055\107\057\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\007\042\013" +
    "\377\014\025\015\067\016\043\017\051\022\u0109\026\034" +
    "\027\031\032\102\035\070\041\054\042\104\046\045\047" +
    "\103\050\015\051\061\052\052\053\010\054\101\055\107" +
    "\057\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\u010a\060\u0108\001\001\000\002\001\001\000\054" +
    "\007\042\013\u010c\014\025\015\067\016\043\017\051\026" +
    "\034\027\031\032\102\035\070\041\054\042\104\046\045" +
    "\047\103\050\015\051\061\052\052\053\010\054\101\055" +
    "\107\057\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\042\013\u010f\014\025\015\067\016\043\017" +
    "\051\026\034\027\031\032\102\035\070\041\054\042\104" +
    "\046\045\047\103\050\015\051\061\052\052\053\010\054" +
    "\101\055\107\057\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\007\042\013\u0114\014\025\015\067\016" +
    "\043\017\051\026\034\027\031\032\102\035\070\041\054" +
    "\042\104\043\u0116\044\u0113\046\045\047\103\050\015\051" +
    "\061\052\052\053\010\054\101\055\107\057\053\060\u0112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\u0119\060\u0118\001\001" +
    "\000\056\007\042\013\u0114\014\025\015\067\016\043\017" +
    "\051\026\034\027\031\032\102\035\070\041\054\042\104" +
    "\043\u011a\046\045\047\103\050\015\051\061\052\052\053" +
    "\010\054\101\055\107\057\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\u011b\060\u0118\001\001\000" +
    "\002\001\001\000\054\007\042\013\u011d\014\025\015\067" +
    "\016\043\017\051\026\034\027\031\032\102\035\070\041" +
    "\054\042\104\046\045\047\103\050\015\051\061\052\052" +
    "\053\010\054\101\055\107\057\053\001\001\000\002\001" +
    "\001\000\054\007\042\013\u011f\014\025\015\067\016\043" +
    "\017\051\026\034\027\031\032\102\035\070\041\054\042" +
    "\104\046\045\047\103\050\015\051\061\052\052\053\010" +
    "\054\101\055\107\057\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\007\042\013\u0124\014\025\015\067\016\043\017\051\026" +
    "\034\027\031\032\102\035\070\041\054\042\104\046\045" +
    "\047\103\050\015\051\061\052\052\053\010\054\101\055" +
    "\107\057\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\042\013\u0127\014\025\015\067\016\043\017" +
    "\051\026\034\027\031\032\102\035\070\041\054\042\104" +
    "\046\045\047\103\050\015\051\061\052\052\053\010\054" +
    "\101\055\107\057\053\001\001\000\002\001\001\000\054" +
    "\007\042\013\u0129\014\025\015\067\016\043\017\051\026" +
    "\034\027\031\032\102\035\070\041\054\042\104\046\045" +
    "\047\103\050\015\051\061\052\052\053\010\054\101\055" +
    "\107\057\053\001\001\000\002\001\001\000\054\007\042" +
    "\013\u012b\014\025\015\067\016\043\017\051\026\034\027" +
    "\031\032\102\035\070\041\054\042\104\046\045\047\103" +
    "\050\015\051\061\052\052\053\010\054\101\055\107\057" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxSMPLException(msg, ioe);
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= multiDef 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtMultiDef m = (StmtMultiDef)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = m; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= increment SEMI 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= ifStmt 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= loopStmt 
            {
              Statement RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement lp = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= printStmt 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement p = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtDefinition(v,e);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definition ::= DEF VARIABLE expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtDefinition(v,e);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // multiDef ::= params ASSIGN expression SEMI 
            {
              StmtMultiDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtMultiDef(p,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("multiDef",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // increment ::= VARIABLE INC 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtInc(v,new ExpLit(1,10)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("increment",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // increment ::= VARIABLE SETINC expression 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StmtInc(v,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("increment",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // increment ::= VARIABLE DEC 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtInc(v,new ExpLit(-1,10)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("increment",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // increment ::= VARIABLE SETDEC expression 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                e.negate();
                RESULT = new StmtInc(v,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("increment",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = s; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= logicExp 
            {
              Exp RESULT =null;
		int lxleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lxright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp lx = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lx; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= callExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= multiExp 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = m; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= caseExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= procedureDef 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpProcedure pd = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pd; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= builtInFn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= readExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // multiExp ::= LPAREN expList RPAREN 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		              
                RESULT = new ExpMult(el);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("multiExp",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // caseExp ::= CASE LBRACE cases RBRACE 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpCase(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseExp",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // case ::= expression COLON expression 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Case(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // case ::= ELSE COLON expression 
            {
              Case RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Case(new ExpLit(true),b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cases ::= case casesAux 
            {
              ArrayList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Case> cl = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            cl.add(0,c);
            RESULT = cl;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cases",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cases ::= empty 
            {
              ArrayList<Case> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cases",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // casesAux ::= COMMA case casesAux 
            {
              ArrayList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Case> cl = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            cl.add(0,c);
            RESULT = cl;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("casesAux",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // casesAux ::= empty 
            {
              ArrayList<Case> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("casesAux",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // loopStmt ::= FOR LPAREN definition expression SEMI increment RPAREN expression 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StmtFor(d,c,e,body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("loopStmt",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // loopStmt ::= WHILE expression DO expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StmtWhile(e,body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("loopStmt",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // letExp ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letExp",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binding ::= VARIABLE EQ expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedureDef ::= PROC LPAREN params RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new ExpProcedure(p,e);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureDef",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procedureDef ::= PROC VARIABLE expression 
            {
              ExpProcedure RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new ExpProcedure(v,e); 
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureDef",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // procedureDef ::= PROC LPAREN params DOT VARIABLE RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new ExpProcedure(p,v,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureDef",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // params ::= VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    pl.add(0,v);
                    RESULT = pl;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // params ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("params",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paramsAux ::= COMMA VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    pl.add(0,v);
                    RESULT = pl;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramsAux",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paramsAux ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramsAux",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // procedureApp ::= VARIABLE LPAREN args RPAREN 
            {
              ExpApplyProc RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> ar = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		                    
                    RESULT =  new ExpApplyProc(v,ar); 
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureApp",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // procedureApp ::= LPAREN expression RPAREN LPAREN args RPAREN 
            {
              ExpApplyProc RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> ar = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new ExpApplyProc(e,ar);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureApp",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // procedureApp ::= procedureApp LPAREN args RPAREN 
            {
              ExpApplyProc RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ExpApplyProc pa = (ExpApplyProc)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> ar = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                    RESULT = new ExpApplyProc(pa,ar);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureApp",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // args ::= expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    al.add(0,e);
                    RESULT = al;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("args",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // args ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("args",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // argsAux ::= COMMA expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    al.add(0,e);
                    RESULT = al;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("argsAux",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // argsAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("argsAux",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // callExp ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new ExpCall(a,b);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ifStmt ::= IF expression THEN expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StmtIf(i,t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifStmt",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ifStmt ::= IF expression THEN expression ELSE expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StmtIf(i,t,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifStmt",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lazyExp ::= LAZY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpLazy(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazyExp",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // logicExp ::= NOT comparison 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpNot(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logicExp ::= logicExp AND comparison 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpAnd(e,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logicExp ::= logicExp OR arithExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpOr(e,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logicExp ::= comparison 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comparison ::= comparison EQ bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpEQ(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comparison ::= comparison GT bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpGT(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comparison ::= comparison LT bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLT(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comparison ::= comparison GE bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpGE(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comparison ::= comparison LE bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLE(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comparison ::= comparison NEQ bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpNEQ(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comparison ::= bitExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bitExp ::= bitExp BITAND arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpBitAnd(b,a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bitExp ::= bitExp BITOR arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpBitOr(b,a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bitExp ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term ::= term MUL comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term ::= term DIV comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term ::= term MOD comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // term ::= term POW comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                RESULT = new ExpPow(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term ::= comp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comp ::= COMP factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpComp(f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comp ::= concatenation 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comp",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // concatenation ::= concatenation CONCAT factor 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpConcat(c,f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("concatenation",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // concatenation ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("concatenation",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLValue< ? > n = (SMPLValue< ? >)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpCar(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpCdr(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= SIZE LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpSize(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= SUBSTRING LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new ExpSubstr(a,b,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= literal 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= lazyExp 
            {
              Exp RESULT =null;
		int lzleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lzright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp lz = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lz; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // factor ::= procedureApp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpApplyProc a = (ExpApplyProc)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= MINUS factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 f.negate();
                             RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit,10); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal ::= BIN 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit,2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literal ::= HEX 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit,16); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literal ::= REAL 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT =  new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literal ::= BOOLEAN 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // literal ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new ExpLit(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // builtInFn ::= PAIR QUERY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpIsPair(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // builtInFn ::= EQV QUERY LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpIsEqv(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // builtInFn ::= EQL QUERY LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpIsEql(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // builtInFn ::= expression LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpGet(e,n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // builtInFn ::= makeCompound 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = m; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // makeCompound ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpPair(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // makeCompound ::= LIST LPAREN expList RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpList(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // makeCompound ::= LBRACK expList RBRACK 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpList(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // makeCompound ::= LCBRACK specList RCBRACK 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Specification> l = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpVector(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expList ::= expression expListAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                el.add(0,e);
                RESULT = el; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expList ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expListAux ::= COMMA expression expListAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                el.add(0,e);
                RESULT = el; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListAux",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expListAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListAux",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // specification ::= expression spec 
            {
              Specification RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                if(e == null){ 
                    RESULT = new Specification(n); 
                }else{
                    RESULT = new Specification(n,e);
                } 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specification",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // spec ::= COLON expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("spec",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // spec ::= empty 
            {
              Exp RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("spec",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // specList ::= specification specListAux 
            {
              ArrayList<Specification> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Specification s = (Specification)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Specification> sl = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                sl.add(0,s);
                RESULT = sl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specList",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // specList ::= empty 
            {
              ArrayList<Specification> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specList",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // specListAux ::= COMMA specification specListAux 
            {
              ArrayList<Specification> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Specification s = (Specification)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Specification> sl = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                sl.add(0,s);
                RESULT = sl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specListAux",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // specListAux ::= empty 
            {
              ArrayList<Specification> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specListAux",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // printStmt ::= PRINT LPAREN expression RPAREN SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                RESULT = new StmtPrint(e);
              
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStmt",44, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // printStmt ::= PRINTLN LPAREN expression RPAREN SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                RESULT = new StmtPrint(e,true);
              
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStmt",44, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // readExp ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readExp",45, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // readExp ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead(true); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readExp",45, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",46, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
