
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.sys.SyntaxSMPLException;
import smpl.values.SMPLValue;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\006\000\002\005\006\000" +
    "\002\012\003\000\002\012\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\036\006\000\002\037\005\000\002\037\003\000" +
    "\002\040\006\000\002\041\005\000\002\042\004\000\002" +
    "\042\003\000\002\043\005\000\002\043\003\000\002\006" +
    "\007\000\002\011\005\000\002\007\004\000\002\007\003" +
    "\000\002\010\005\000\002\010\003\000\002\026\007\000" +
    "\002\026\005\000\002\026\011\000\002\027\004\000\002" +
    "\027\003\000\002\030\005\000\002\030\003\000\002\031" +
    "\006\000\002\031\010\000\002\031\006\000\002\032\004" +
    "\000\002\032\003\000\002\033\005\000\002\033\003\000" +
    "\002\034\010\000\002\035\006\000\002\035\010\000\002" +
    "\025\006\000\002\044\004\000\002\044\005\000\002\044" +
    "\005\000\002\044\003\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\003\000\002\046\005\000\002" +
    "\046\005\000\002\046\003\000\002\047\005\000\002\047" +
    "\005\000\002\047\003\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\003\000" +
    "\002\051\004\000\002\051\003\000\002\014\005\000\002" +
    "\014\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\005\000\002\052\006\000\002\052\006\000\002\052\006" +
    "\000\002\052\012\000\002\052\003\000\002\052\003\000" +
    "\002\052\004\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\015\007" +
    "\000\002\015\011\000\002\015\011\000\002\015\006\000" +
    "\002\015\003\000\002\016\010\000\002\016\006\000\002" +
    "\016\005\000\002\016\007\000\002\017\004\000\002\017" +
    "\003\000\002\020\005\000\002\020\003\000\002\021\004" +
    "\000\002\022\004\000\002\022\003\000\002\023\004\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\054\007\000\002\054\007\000\002\055\005\000\002\055" +
    "\005\000\002\056\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\104\004\020\006\046\010\053\017\025\026" +
    "\032\037\026\041\065\042\030\044\067\046\063\047\034" +
    "\052\014\054\045\055\015\056\017\057\060\060\040\061" +
    "\050\062\061\063\005\064\074\065\023\066\056\067\011" +
    "\070\027\071\016\072\052\073\022\074\047\075\054\076" +
    "\010\077\066\100\037\001\002\000\004\002\u0111\001\002" +
    "\000\004\004\u010a\001\002\000\064\005\uffb8\006\uffb8\007" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\050\uffb8\051\uffb8\001\002\000\106\002\001\004" +
    "\020\006\046\010\053\017\025\026\032\037\026\041\065" +
    "\042\030\044\067\046\063\047\034\052\014\054\045\055" +
    "\015\056\017\057\060\060\040\061\050\062\061\063\005" +
    "\064\074\065\023\066\056\067\011\070\027\071\016\072" +
    "\052\073\022\074\047\075\054\076\010\077\066\100\037" +
    "\001\002\000\066\005\uffa8\006\uffa8\007\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\040\uffa8" +
    "\050\uffa8\051\uffa8\001\002\000\004\004\u0108\001\002\000" +
    "\050\005\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\024\131\025\132\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\050\uffc3\051\uffc3" +
    "\001\002\000\110\002\ufffd\004\ufffd\006\ufffd\010\ufffd\011" +
    "\ufffd\017\ufffd\026\ufffd\037\ufffd\041\ufffd\042\ufffd\044\ufffd" +
    "\046\ufffd\047\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074" +
    "\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd\001\002\000\004" +
    "\010\373\001\002\000\004\004\370\001\002\000\066\005" +
    "\uffa7\006\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\040\uffa7\050\uffa7\051\uffa7\001" +
    "\002\000\004\004\365\001\002\000\076\004\020\006\046" +
    "\010\053\017\025\026\032\037\026\041\065\042\030\046" +
    "\063\047\034\052\014\054\045\055\015\056\017\057\060" +
    "\060\040\061\050\062\061\063\005\066\056\067\011\070" +
    "\027\071\016\072\052\073\022\074\047\075\101\076\010" +
    "\077\066\100\037\001\002\000\066\005\uffac\006\uffac\007" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\040\uffac\050\uffac\051\uffac\001\002\000\066\005" +
    "\uffa5\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\040\uffa5\050\uffa5\051\uffa5\001" +
    "\002\000\004\004\352\001\002\000\024\005\ufff1\006\ufff1" +
    "\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\050\ufff1\051" +
    "\ufff1\001\002\000\040\004\127\017\025\055\015\056\017" +
    "\060\040\063\005\070\027\071\016\072\052\073\022\074" +
    "\047\075\101\076\010\077\066\100\037\001\002\000\042" +
    "\004\127\017\025\026\032\055\015\056\017\060\040\063" +
    "\005\070\027\071\016\072\052\073\022\074\047\075\101" +
    "\076\010\077\066\100\037\001\002\000\066\005\uffa2\006" +
    "\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\040\uffa2\050\uffa2\051\uffa2\001\002\000" +
    "\004\004\343\001\002\000\024\005\ufff8\006\ufff8\007\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\050\ufff8\051\ufff8\001" +
    "\002\000\040\004\127\017\025\055\015\056\017\060\040" +
    "\063\005\070\027\071\016\072\052\073\022\074\047\075" +
    "\101\076\010\077\066\100\037\001\002\000\024\005\ufff0" +
    "\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\050" +
    "\ufff0\051\ufff0\001\002\000\076\004\020\006\046\010\053" +
    "\017\025\026\032\037\026\041\065\042\030\046\063\047" +
    "\034\052\014\054\045\055\015\056\017\057\060\060\040" +
    "\061\050\062\061\063\005\066\056\067\011\070\027\071" +
    "\016\072\052\073\022\074\047\075\101\076\010\077\066" +
    "\100\037\001\002\000\030\005\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\035\331\036\332\050\ufff6" +
    "\051\ufff6\001\002\000\006\006\111\012\330\001\002\000" +
    "\066\005\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\040\uffa3\050\uffa3\051" +
    "\uffa3\001\002\000\004\004\325\001\002\000\024\005\uff9d" +
    "\006\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\050" +
    "\uff9d\051\uff9d\001\002\000\064\005\uffbd\006\uffbd\007\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd\017\uffbd\020" +
    "\141\021\142\022\137\023\140\024\uffbd\025\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\050\uffbd\051\uffbd\001\002\000\024\005\uffef\006\uffef" +
    "\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\050\uffef\051" +
    "\uffef\001\002\000\024\005\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\050\ufff3\051\ufff3\001\002\000" +
    "\006\004\315\053\314\001\002\000\102\004\020\006\046" +
    "\007\uff89\010\053\013\272\017\025\026\032\037\026\041" +
    "\065\042\030\046\063\047\034\052\014\054\045\055\015" +
    "\056\017\057\060\060\040\061\050\062\061\063\005\066" +
    "\056\067\011\070\027\071\016\072\052\073\022\074\047" +
    "\075\101\076\010\077\066\100\037\001\002\000\066\005" +
    "\uffa4\006\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\040\uffa4\050\uffa4\051\uffa4\001" +
    "\002\000\004\053\264\001\002\000\054\005\uffc0\006\uffc0" +
    "\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\016\134\017" +
    "\135\024\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\050\uffc0\051\uffc0\001" +
    "\002\000\066\005\uffa6\006\uffa6\007\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\040\uffa6\050" +
    "\uffa6\051\uffa6\001\002\000\104\004\020\006\046\010\053" +
    "\017\025\026\032\037\026\041\065\042\030\044\067\046" +
    "\063\047\034\052\014\054\045\055\015\056\017\057\060" +
    "\060\040\061\050\062\061\063\005\064\074\065\023\066" +
    "\056\067\011\070\027\071\016\072\052\073\022\074\047" +
    "\075\054\076\010\077\066\100\037\001\002\000\054\004" +
    "\102\006\uffb2\012\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2" +
    "\045\256\001\002\000\066\005\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\040\254\050\uffb6\051\uffb6\001\002\000\004\004\252\001" +
    "\002\000\024\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\050\ufff5\051\ufff5\001\002\000\004\004" +
    "\240\001\002\000\004\053\232\001\002\000\110\002\ufffb" +
    "\004\ufffb\006\ufffb\010\ufffb\011\ufffb\017\ufffb\026\ufffb\037" +
    "\ufffb\041\ufffb\042\ufffb\044\ufffb\046\ufffb\047\ufffb\052\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb" +
    "\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077" +
    "\ufffb\100\ufffb\001\002\000\004\004\214\001\002\000\024" +
    "\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\050\ufff4\051\ufff4\001\002\000\006\004\173\075\174" +
    "\001\002\000\066\005\uffa9\006\uffa9\007\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\040\uffa9" +
    "\050\uffa9\051\uffa9\001\002\000\004\075\170\001\002\000" +
    "\066\005\uffb4\006\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\050\uffb4\051" +
    "\uffb4\001\002\000\070\004\165\005\uffab\006\uffab\007\uffab" +
    "\011\uffab\012\uffab\013\uffab\014\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\040\uffab\050\uffab\051\uffab\001\002\000\044\005\uffca" +
    "\006\uffca\007\uffca\011\uffca\012\uffca\013\uffca\014\uffca\027" +
    "\122\030\123\031\121\032\125\033\124\034\126\035\uffca" +
    "\036\uffca\050\uffca\051\uffca\001\002\000\024\005\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\050\ufff2" +
    "\051\ufff2\001\002\000\004\004\077\001\002\000\066\005" +
    "\uffb3\006\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\040\uffb3\050\uffb3\051\uffb3\001" +
    "\002\000\110\002\ufffe\004\ufffe\006\ufffe\010\ufffe\011\ufffe" +
    "\017\ufffe\026\ufffe\037\ufffe\041\ufffe\042\ufffe\044\ufffe\046" +
    "\ufffe\047\ufffe\052\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066" +
    "\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe" +
    "\075\ufffe\076\ufffe\077\ufffe\100\ufffe\001\002\000\076\004" +
    "\020\006\046\010\053\017\025\026\032\037\026\041\065" +
    "\042\030\046\063\047\034\052\014\054\045\055\015\056" +
    "\017\057\060\060\040\061\050\062\061\063\005\066\056" +
    "\067\011\070\027\071\016\072\052\073\022\074\047\075" +
    "\101\076\010\077\066\100\037\001\002\000\006\005\117" +
    "\006\111\001\002\000\070\004\102\005\uffb2\006\uffb2\007" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\040\uffb2\050\uffb2\051\uffb2\001\002\000\100\004" +
    "\020\005\uff89\006\046\010\053\017\025\026\032\037\026" +
    "\041\065\042\030\046\063\047\034\052\014\054\045\055" +
    "\015\056\017\057\060\060\040\061\050\062\061\063\005" +
    "\066\056\067\011\070\027\071\016\072\052\073\022\074" +
    "\047\075\101\076\010\077\066\100\037\001\002\000\004" +
    "\005\uffd4\001\002\000\010\005\uff89\006\111\014\107\001" +
    "\002\000\004\005\106\001\002\000\070\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\040\uffd8\050\uffd8\051\uffd8\001\002" +
    "\000\076\004\020\006\046\010\053\017\025\026\032\037" +
    "\026\041\065\042\030\046\063\047\034\052\014\054\045" +
    "\055\015\056\017\057\060\060\040\061\050\062\061\063" +
    "\005\066\056\067\011\070\027\071\016\072\052\073\022" +
    "\074\047\075\101\076\010\077\066\100\037\001\002\000" +
    "\004\005\uffd5\001\002\000\076\004\020\006\046\010\053" +
    "\017\025\026\032\037\026\041\065\042\030\046\063\047" +
    "\034\052\014\054\045\055\015\056\017\057\060\060\040" +
    "\061\050\062\061\063\005\066\056\067\011\070\027\071" +
    "\016\072\052\073\022\074\047\075\101\076\010\077\066" +
    "\100\037\001\002\000\004\005\uffd2\001\002\000\006\006" +
    "\111\007\114\001\002\000\024\005\uff9e\006\uff9e\007\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\050\uff9e\051\uff9e\001" +
    "\002\000\010\005\uff89\006\111\014\107\001\002\000\004" +
    "\005\uffd3\001\002\000\004\012\120\001\002\000\110\002" +
    "\uff8d\004\uff8d\006\uff8d\010\uff8d\011\uff8d\017\uff8d\026\uff8d" +
    "\037\uff8d\041\uff8d\042\uff8d\044\uff8d\046\uff8d\047\uff8d\052" +
    "\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d" +
    "\077\uff8d\100\uff8d\001\002\000\042\004\127\017\025\026" +
    "\032\055\015\056\017\060\040\063\005\070\027\071\016" +
    "\072\052\073\022\074\047\075\101\076\010\077\066\100" +
    "\037\001\002\000\042\004\127\017\025\026\032\055\015" +
    "\056\017\060\040\063\005\070\027\071\016\072\052\073" +
    "\022\074\047\075\101\076\010\077\066\100\037\001\002" +
    "\000\042\004\127\017\025\026\032\055\015\056\017\060" +
    "\040\063\005\070\027\071\016\072\052\073\022\074\047" +
    "\075\101\076\010\077\066\100\037\001\002\000\042\004" +
    "\127\017\025\026\032\055\015\056\017\060\040\063\005" +
    "\070\027\071\016\072\052\073\022\074\047\075\101\076" +
    "\010\077\066\100\037\001\002\000\042\004\127\017\025" +
    "\026\032\055\015\056\017\060\040\063\005\070\027\071" +
    "\016\072\052\073\022\074\047\075\101\076\010\077\066" +
    "\100\037\001\002\000\042\004\127\017\025\026\032\055" +
    "\015\056\017\060\040\063\005\070\027\071\016\072\052" +
    "\073\022\074\047\075\101\076\010\077\066\100\037\001" +
    "\002\000\076\004\020\006\046\010\053\017\025\026\032" +
    "\037\026\041\065\042\030\046\063\047\034\052\014\054" +
    "\045\055\015\056\017\057\060\060\040\061\050\062\061" +
    "\063\005\066\056\067\011\070\027\071\016\072\052\073" +
    "\022\074\047\075\101\076\010\077\066\100\037\001\002" +
    "\000\050\005\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\024\131\025\132\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\050\uffc4\051" +
    "\uffc4\001\002\000\042\004\127\017\025\026\032\055\015" +
    "\056\017\060\040\063\005\070\027\071\016\072\052\073" +
    "\022\074\047\075\101\076\010\077\066\100\037\001\002" +
    "\000\042\004\127\017\025\026\032\055\015\056\017\060" +
    "\040\063\005\070\027\071\016\072\052\073\022\074\047" +
    "\075\101\076\010\077\066\100\037\001\002\000\054\005" +
    "\uffc1\006\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\016\134\017\135\024\uffc1\025\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\050\uffc1" +
    "\051\uffc1\001\002\000\042\004\127\017\025\026\032\055" +
    "\015\056\017\060\040\063\005\070\027\071\016\072\052" +
    "\073\022\074\047\075\101\076\010\077\066\100\037\001" +
    "\002\000\042\004\127\017\025\026\032\055\015\056\017" +
    "\060\040\063\005\070\027\071\016\072\052\073\022\074" +
    "\047\075\101\076\010\077\066\100\037\001\002\000\064" +
    "\005\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\016\uffbe\017\uffbe\020\141\021\142\022\137\023\140" +
    "\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\050\uffbe\051\uffbe\001\002" +
    "\000\042\004\127\017\025\026\032\055\015\056\017\060" +
    "\040\063\005\070\027\071\016\072\052\073\022\074\047" +
    "\075\101\076\010\077\066\100\037\001\002\000\042\004" +
    "\127\017\025\026\032\055\015\056\017\060\040\063\005" +
    "\070\027\071\016\072\052\073\022\074\047\075\101\076" +
    "\010\077\066\100\037\001\002\000\042\004\127\017\025" +
    "\026\032\055\015\056\017\060\040\063\005\070\027\071" +
    "\016\072\052\073\022\074\047\075\101\076\010\077\066" +
    "\100\037\001\002\000\042\004\127\017\025\026\032\055" +
    "\015\056\017\060\040\063\005\070\027\071\016\072\052" +
    "\073\022\074\047\075\101\076\010\077\066\100\037\001" +
    "\002\000\064\005\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\050\uffbb\051" +
    "\uffbb\001\002\000\064\005\uffbc\006\uffbc\007\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\050" +
    "\uffbc\051\uffbc\001\002\000\064\005\uffb9\006\uffb9\007\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\050\uffb9\051\uffb9\001\002\000\064\005\uffba\006\uffba" +
    "\007\uffba\011\uffba\012\uffba\013\uffba\014\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\050\uffba\051\uffba\001\002\000\064\005\uffbf" +
    "\006\uffbf\007\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\016" +
    "\uffbf\017\uffbf\020\141\021\142\022\137\023\140\024\uffbf" +
    "\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\050\uffbf\051\uffbf\001\002\000\054" +
    "\005\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\016\134\017\135\024\uffc2\025\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\050" +
    "\uffc2\051\uffc2\001\002\000\010\005\154\006\ufff1\014\ufff1" +
    "\001\002\000\006\005\153\006\111\001\002\000\066\005" +
    "\uffb1\006\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\040\uffb1\050\uffb1\051\uffb1\001" +
    "\002\000\004\004\155\001\002\000\100\004\020\005\uff89" +
    "\006\046\010\053\017\025\026\032\037\026\041\065\042" +
    "\030\046\063\047\034\052\014\054\045\055\015\056\017" +
    "\057\060\060\040\061\050\062\061\063\005\066\056\067" +
    "\011\070\027\071\016\072\052\073\022\074\047\075\101" +
    "\076\010\077\066\100\037\001\002\000\004\005\157\001" +
    "\002\000\070\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040" +
    "\uffd7\050\uffd7\051\uffd7\001\002\000\050\005\uffc6\006\uffc6" +
    "\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\024\131\025" +
    "\132\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\050\uffc6\051\uffc6\001\002\000\050\005" +
    "\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\024\131\025\132\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\050\uffc5\051\uffc5\001\002" +
    "\000\050\005\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\024\131\025\132\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\050\uffc8\051" +
    "\uffc8\001\002\000\050\005\uffc9\006\uffc9\007\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\024\131\025\132\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\050\uffc9\051\uffc9\001\002\000\050\005\uffc7\006\uffc7\007" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\024\131\025\132" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\050\uffc7\051\uffc7\001\002\000\100\004\020" +
    "\005\uff89\006\046\010\053\017\025\026\032\037\026\041" +
    "\065\042\030\046\063\047\034\052\014\054\045\055\015" +
    "\056\017\057\060\060\040\061\050\062\061\063\005\066" +
    "\056\067\011\070\027\071\016\072\052\073\022\074\047" +
    "\075\101\076\010\077\066\100\037\001\002\000\004\005" +
    "\167\001\002\000\070\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\040\uffd6\050\uffd6\051\uffd6\001\002\000\076\004\020" +
    "\006\046\010\053\017\025\026\032\037\026\041\065\042" +
    "\030\046\063\047\034\052\014\054\045\055\015\056\017" +
    "\057\060\060\040\061\050\062\061\063\005\066\056\067" +
    "\011\070\027\071\016\072\052\073\022\074\047\075\101" +
    "\076\010\077\066\100\037\001\002\000\006\006\111\012" +
    "\172\001\002\000\110\002\ufff9\004\ufff9\006\ufff9\010\ufff9" +
    "\011\ufff9\017\ufff9\026\ufff9\037\ufff9\041\ufff9\042\ufff9\044" +
    "\ufff9\046\ufff9\047\ufff9\052\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9" +
    "\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9\001\002\000" +
    "\010\005\uff89\015\uff89\075\200\001\002\000\076\004\020" +
    "\006\046\010\053\017\025\026\032\037\026\041\065\042" +
    "\030\046\063\047\034\052\014\054\045\055\015\056\017" +
    "\057\060\060\040\061\050\062\061\063\005\066\056\067" +
    "\011\070\027\071\016\072\052\073\022\074\047\075\101" +
    "\076\010\077\066\100\037\001\002\000\024\005\uffde\006" +
    "\111\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde\050\uffde" +
    "\051\uffde\001\002\000\006\005\uffdb\015\uffdb\001\002\000" +
    "\006\005\206\015\207\001\002\000\010\005\uff89\014\201" +
    "\015\uff89\001\002\000\004\075\204\001\002\000\006\005" +
    "\uffdc\015\uffdc\001\002\000\006\005\uffd9\015\uffd9\001\002" +
    "\000\010\005\uff89\014\201\015\uff89\001\002\000\006\005" +
    "\uffda\015\uffda\001\002\000\076\004\020\006\046\010\053" +
    "\017\025\026\032\037\026\041\065\042\030\046\063\047" +
    "\034\052\014\054\045\055\015\056\017\057\060\060\040" +
    "\061\050\062\061\063\005\066\056\067\011\070\027\071" +
    "\016\072\052\073\022\074\047\075\101\076\010\077\066" +
    "\100\037\001\002\000\004\075\210\001\002\000\004\005" +
    "\211\001\002\000\076\004\020\006\046\010\053\017\025" +
    "\026\032\037\026\041\065\042\030\046\063\047\034\052" +
    "\014\054\045\055\015\056\017\057\060\060\040\061\050" +
    "\062\061\063\005\066\056\067\011\070\027\071\016\072" +
    "\052\073\022\074\047\075\101\076\010\077\066\100\037" +
    "\001\002\000\024\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\050\uffdd\051\uffdd\001\002\000\024" +
    "\005\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\050\uffdf\051\uffdf\001\002\000\006\005\uff89\075\220" +
    "\001\002\000\004\005\uffe2\001\002\000\006\005\uff89\014" +
    "\225\001\002\000\004\005\223\001\002\000\004\027\221" +
    "\001\002\000\076\004\020\006\046\010\053\017\025\026" +
    "\032\037\026\041\065\042\030\046\063\047\034\052\014" +
    "\054\045\055\015\056\017\057\060\060\040\061\050\062" +
    "\061\063\005\066\056\067\011\070\027\071\016\072\052" +
    "\073\022\074\047\075\101\076\010\077\066\100\037\001" +
    "\002\000\010\005\uffe4\006\111\014\uffe4\001\002\000\076" +
    "\004\020\006\046\010\053\017\025\026\032\037\026\041" +
    "\065\042\030\046\063\047\034\052\014\054\045\055\015" +
    "\056\017\057\060\060\040\061\050\062\061\063\005\066" +
    "\056\067\011\070\027\071\016\072\052\073\022\074\047" +
    "\075\101\076\010\077\066\100\037\001\002\000\024\005" +
    "\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\050\uffe5\051\uffe5\001\002\000\004\075\220\001\002\000" +
    "\004\005\uffe0\001\002\000\004\005\uffe3\001\002\000\006" +
    "\005\uff89\014\225\001\002\000\004\005\uffe1\001\002\000" +
    "\004\004\233\001\002\000\076\004\020\006\046\010\053" +
    "\017\025\026\032\037\026\041\065\042\030\046\063\047" +
    "\034\052\014\054\045\055\015\056\017\057\060\060\040" +
    "\061\050\062\061\063\005\066\056\067\011\070\027\071" +
    "\016\072\052\073\022\074\047\075\101\076\010\077\066" +
    "\100\037\001\002\000\006\006\111\014\235\001\002\000" +
    "\076\004\020\006\046\010\053\017\025\026\032\037\026" +
    "\041\065\042\030\046\063\047\034\052\014\054\045\055" +
    "\015\056\017\057\060\060\040\061\050\062\061\063\005" +
    "\066\056\067\011\070\027\071\016\072\052\073\022\074" +
    "\047\075\101\076\010\077\066\100\037\001\002\000\006" +
    "\005\237\006\111\001\002\000\024\005\uff9f\006\uff9f\007" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\050\uff9f\051\uff9f" +
    "\001\002\000\100\004\020\005\uff89\006\046\010\053\017" +
    "\025\026\032\037\026\041\065\042\030\046\063\047\034" +
    "\052\014\054\045\055\015\056\017\057\060\060\040\061" +
    "\050\062\061\063\005\066\056\067\011\070\027\071\016" +
    "\072\052\073\022\074\047\075\101\076\010\077\066\100" +
    "\037\001\002\000\006\005\uff97\007\uff97\001\002\000\012" +
    "\005\uff89\006\111\007\uff89\014\245\001\002\000\004\005" +
    "\244\001\002\000\024\005\uff9b\006\uff9b\007\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\050\uff9b\051\uff9b\001\002\000" +
    "\076\004\020\006\046\010\053\017\025\026\032\037\026" +
    "\041\065\042\030\046\063\047\034\052\014\054\045\055" +
    "\015\056\017\057\060\060\040\061\050\062\061\063\005" +
    "\066\056\067\011\070\027\071\016\072\052\073\022\074" +
    "\047\075\101\076\010\077\066\100\037\001\002\000\006" +
    "\005\uff98\007\uff98\001\002\000\006\005\uff95\007\uff95\001" +
    "\002\000\012\005\uff89\006\111\007\uff89\014\245\001\002" +
    "\000\006\005\uff96\007\uff96\001\002\000\004\005\253\001" +
    "\002\000\024\005\uff8b\006\uff8b\007\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\014\uff8b\050\uff8b\051\uff8b\001\002\000\040\004" +
    "\127\017\025\055\015\056\017\060\040\063\005\070\027" +
    "\071\016\072\052\073\022\074\047\075\101\076\010\077" +
    "\066\100\037\001\002\000\066\005\uffb5\006\uffb5\007\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\040\uffb5\050\uffb5\051\uffb5\001\002\000\076\004\020" +
    "\006\046\010\053\017\025\026\032\037\026\041\065\042" +
    "\030\046\063\047\034\052\014\054\045\055\015\056\017" +
    "\057\060\060\040\061\050\062\061\063\005\066\056\067" +
    "\011\070\027\071\016\072\052\073\022\074\047\075\101" +
    "\076\010\077\066\100\037\001\002\000\006\006\111\012" +
    "\260\001\002\000\110\002\ufffa\004\ufffa\006\ufffa\010\ufffa" +
    "\011\ufffa\017\ufffa\026\ufffa\037\ufffa\041\ufffa\042\ufffa\044" +
    "\ufffa\046\ufffa\047\ufffa\052\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\001\002\000" +
    "\106\004\020\006\046\010\053\011\262\017\025\026\032" +
    "\037\026\041\065\042\030\044\067\046\063\047\034\052" +
    "\014\054\045\055\015\056\017\057\060\060\040\061\050" +
    "\062\061\063\005\064\074\065\023\066\056\067\011\070" +
    "\027\071\016\072\052\073\022\074\047\075\054\076\010" +
    "\077\066\100\037\001\002\000\024\005\ufff7\006\ufff7\007" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\050\ufff7\051\ufff7" +
    "\001\002\000\110\002\uffff\004\uffff\006\uffff\010\uffff\011" +
    "\uffff\017\uffff\026\uffff\037\uffff\041\uffff\042\uffff\044\uffff" +
    "\046\uffff\047\uffff\052\uffff\054\uffff\055\uffff\056\uffff\057" +
    "\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065\uffff" +
    "\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074" +
    "\uffff\075\uffff\076\uffff\077\uffff\100\uffff\001\002\000\004" +
    "\004\265\001\002\000\076\004\020\006\046\010\053\017" +
    "\025\026\032\037\026\041\065\042\030\046\063\047\034" +
    "\052\014\054\045\055\015\056\017\057\060\060\040\061" +
    "\050\062\061\063\005\066\056\067\011\070\027\071\016" +
    "\072\052\073\022\074\047\075\101\076\010\077\066\100" +
    "\037\001\002\000\006\006\111\014\267\001\002\000\076" +
    "\004\020\006\046\010\053\017\025\026\032\037\026\041" +
    "\065\042\030\046\063\047\034\052\014\054\045\055\015" +
    "\056\017\057\060\060\040\061\050\062\061\063\005\066" +
    "\056\067\011\070\027\071\016\072\052\073\022\074\047" +
    "\075\101\076\010\077\066\100\037\001\002\000\006\005" +
    "\271\006\111\001\002\000\024\005\uffa0\006\uffa0\007\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\050\uffa0\051\uffa0\001" +
    "\002\000\100\004\020\006\046\010\053\013\uff89\017\025" +
    "\026\032\037\026\041\065\042\030\046\063\047\034\052" +
    "\014\054\045\055\015\056\017\057\060\060\040\061\050" +
    "\062\061\063\005\066\056\067\011\070\027\071\016\072" +
    "\052\073\022\074\047\075\101\076\010\077\066\100\037" +
    "\001\002\000\004\007\274\001\002\000\024\005\uff9a\006" +
    "\uff9a\007\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\050\uff9a" +
    "\051\uff9a\001\002\000\004\013\uff90\001\002\000\006\013" +
    "\uff89\014\307\001\002\000\010\006\111\013\304\014\uff89" +
    "\001\002\000\004\013\301\001\002\000\004\007\302\001" +
    "\002\000\024\005\uff99\006\uff99\007\uff99\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\050\uff99\051\uff99\001\002\000\006\013" +
    "\uff94\014\uff94\001\002\000\076\004\020\006\046\010\053" +
    "\017\025\026\032\037\026\041\065\042\030\046\063\047" +
    "\034\052\014\054\045\055\015\056\017\057\060\060\040" +
    "\061\050\062\061\063\005\066\056\067\011\070\027\071" +
    "\016\072\052\073\022\074\047\075\101\076\010\077\066" +
    "\100\037\001\002\000\006\013\uff92\014\uff92\001\002\000" +
    "\010\006\111\013\uff93\014\uff93\001\002\000\076\004\020" +
    "\006\046\010\053\017\025\026\032\037\026\041\065\042" +
    "\030\046\063\047\034\052\014\054\045\055\015\056\017" +
    "\057\060\060\040\061\050\062\061\063\005\066\056\067" +
    "\011\070\027\071\016\072\052\073\022\074\047\075\101" +
    "\076\010\077\066\100\037\001\002\000\004\013\uff91\001" +
    "\002\000\004\013\uff8e\001\002\000\006\013\uff89\014\307" +
    "\001\002\000\004\013\uff8f\001\002\000\004\004\322\001" +
    "\002\000\076\004\020\006\046\010\053\017\025\026\032" +
    "\037\026\041\065\042\030\046\063\047\034\052\014\054" +
    "\045\055\015\056\017\057\060\060\040\061\050\062\061" +
    "\063\005\066\056\067\011\070\027\071\016\072\052\073" +
    "\022\074\047\075\101\076\010\077\066\100\037\001\002" +
    "\000\006\006\111\014\317\001\002\000\076\004\020\006" +
    "\046\010\053\017\025\026\032\037\026\041\065\042\030" +
    "\046\063\047\034\052\014\054\045\055\015\056\017\057" +
    "\060\060\040\061\050\062\061\063\005\066\056\067\011" +
    "\070\027\071\016\072\052\073\022\074\047\075\101\076" +
    "\010\077\066\100\037\001\002\000\006\005\321\006\111" +
    "\001\002\000\024\005\uff9c\006\uff9c\007\uff9c\011\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\050\uff9c\051\uff9c\001\002\000\076" +
    "\004\020\006\046\010\053\017\025\026\032\037\026\041" +
    "\065\042\030\046\063\047\034\052\014\054\045\055\015" +
    "\056\017\057\060\060\040\061\050\062\061\063\005\066" +
    "\056\067\011\070\027\071\016\072\052\073\022\074\047" +
    "\075\101\076\010\077\066\100\037\001\002\000\006\005" +
    "\324\006\111\001\002\000\024\005\uffa1\006\uffa1\007\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\050\uffa1\051\uffa1\001" +
    "\002\000\076\004\020\006\046\010\053\017\025\026\032" +
    "\037\026\041\065\042\030\046\063\047\034\052\014\054" +
    "\045\055\015\056\017\057\060\060\040\061\050\062\061" +
    "\063\005\066\056\067\011\070\027\071\016\072\052\073" +
    "\022\074\047\075\101\076\010\077\066\100\037\001\002" +
    "\000\006\005\327\006\111\001\002\000\066\005\uffae\006" +
    "\uffae\007\uffae\011\uffae\012\uffae\013\uffae\014\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\040\uffae\050\uffae\051\uffae\001\002\000" +
    "\110\002\ufffc\004\ufffc\006\ufffc\010\ufffc\011\ufffc\017\ufffc" +
    "\026\ufffc\037\ufffc\041\ufffc\042\ufffc\044\ufffc\046\ufffc\047" +
    "\ufffc\052\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067" +
    "\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc" +
    "\076\ufffc\077\ufffc\100\ufffc\001\002\000\042\004\127\017" +
    "\025\026\032\055\015\056\017\060\040\063\005\070\027" +
    "\071\016\072\052\073\022\074\047\075\101\076\010\077" +
    "\066\100\037\001\002\000\042\004\127\017\025\026\032" +
    "\055\015\056\017\060\040\063\005\070\027\071\016\072" +
    "\052\073\022\074\047\075\101\076\010\077\066\100\037" +
    "\001\002\000\034\005\uffcb\006\uffcb\007\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\016\134\017\135\035\uffcb\036\uffcb" +
    "\050\uffcb\051\uffcb\001\002\000\044\005\uffcc\006\uffcc\007" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\027\122\030\123" +
    "\031\121\032\125\033\124\034\126\035\uffcc\036\uffcc\050" +
    "\uffcc\051\uffcc\001\002\000\006\006\111\050\336\001\002" +
    "\000\076\004\020\006\046\010\053\017\025\026\032\037" +
    "\026\041\065\042\030\046\063\047\034\052\014\054\045" +
    "\055\015\056\017\057\060\060\040\061\050\062\061\063" +
    "\005\066\056\067\011\070\027\071\016\072\052\073\022" +
    "\074\047\075\101\076\010\077\066\100\037\001\002\000" +
    "\024\005\uffd0\006\111\007\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\050\uffd0\051\340\001\002\000\076\004\020\006" +
    "\046\010\053\017\025\026\032\037\026\041\065\042\030" +
    "\046\063\047\034\052\014\054\045\055\015\056\017\057" +
    "\060\060\040\061\050\062\061\063\005\066\056\067\011" +
    "\070\027\071\016\072\052\073\022\074\047\075\101\076" +
    "\010\077\066\100\037\001\002\000\024\005\uffcf\006\uffcf" +
    "\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\050\uffcf\051" +
    "\uffcf\001\002\000\064\005\uffb7\006\uffb7\007\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\050" +
    "\uffb7\051\uffb7\001\002\000\076\004\020\006\046\010\053" +
    "\017\025\026\032\037\026\041\065\042\030\046\063\047" +
    "\034\052\014\054\045\055\015\056\017\057\060\060\040" +
    "\061\050\062\061\063\005\066\056\067\011\070\027\071" +
    "\016\072\052\073\022\074\047\075\101\076\010\077\066" +
    "\100\037\001\002\000\006\006\111\014\345\001\002\000" +
    "\076\004\020\006\046\010\053\017\025\026\032\037\026" +
    "\041\065\042\030\046\063\047\034\052\014\054\045\055" +
    "\015\056\017\057\060\060\040\061\050\062\061\063\005" +
    "\066\056\067\011\070\027\071\016\072\052\073\022\074" +
    "\047\075\101\076\010\077\066\100\037\001\002\000\006" +
    "\005\347\006\111\001\002\000\024\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\050\uffd1\051\uffd1" +
    "\001\002\000\044\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\027\122\030\123\031\121\032\125" +
    "\033\124\034\126\035\uffcd\036\uffcd\050\uffcd\051\uffcd\001" +
    "\002\000\066\005\uffaa\006\uffaa\007\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\040\uffaa\050" +
    "\uffaa\051\uffaa\001\002\000\076\004\020\006\046\010\053" +
    "\017\025\026\032\037\026\041\065\042\030\046\063\047" +
    "\034\052\014\054\045\055\015\056\017\057\060\060\040" +
    "\061\050\062\061\063\005\066\056\067\011\070\027\071" +
    "\016\072\052\073\022\074\047\075\101\076\010\077\066" +
    "\100\037\001\002\000\006\005\354\006\111\001\002\000" +
    "\004\012\355\001\002\000\110\002\uff8c\004\uff8c\006\uff8c" +
    "\010\uff8c\011\uff8c\017\uff8c\026\uff8c\037\uff8c\041\uff8c\042" +
    "\uff8c\044\uff8c\046\uff8c\047\uff8c\052\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064" +
    "\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c" +
    "\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\001" +
    "\002\000\010\005\153\006\111\014\357\001\002\000\076" +
    "\004\020\006\046\010\053\017\025\026\032\037\026\041" +
    "\065\042\030\046\063\047\034\052\014\054\045\055\015" +
    "\056\017\057\060\060\040\061\050\062\061\063\005\066" +
    "\056\067\011\070\027\071\016\072\052\073\022\074\047" +
    "\075\101\076\010\077\066\100\037\001\002\000\004\005" +
    "\362\001\002\000\004\005\uffec\001\002\000\024\005\uffee" +
    "\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee\014\uffee\050" +
    "\uffee\051\uffee\001\002\000\010\005\uff89\006\111\014\357" +
    "\001\002\000\004\005\uffed\001\002\000\076\004\020\006" +
    "\046\010\053\017\025\026\032\037\026\041\065\042\030" +
    "\046\063\047\034\052\014\054\045\055\015\056\017\057" +
    "\060\060\040\061\050\062\061\063\005\066\056\067\011" +
    "\070\027\071\016\072\052\073\022\074\047\075\101\076" +
    "\010\077\066\100\037\001\002\000\006\005\367\006\111" +
    "\001\002\000\066\005\uffaf\006\uffaf\007\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\040\uffaf" +
    "\050\uffaf\051\uffaf\001\002\000\076\004\020\006\046\010" +
    "\053\017\025\026\032\037\026\041\065\042\030\046\063" +
    "\047\034\052\014\054\045\055\015\056\017\057\060\060" +
    "\040\061\050\062\061\063\005\066\056\067\011\070\027" +
    "\071\016\072\052\073\022\074\047\075\101\076\010\077" +
    "\066\100\037\001\002\000\006\005\372\006\111\001\002" +
    "\000\066\005\uffb0\006\uffb0\007\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\050\uffb0" +
    "\051\uffb0\001\002\000\100\004\020\006\046\010\053\011" +
    "\uff89\017\025\026\032\037\026\041\065\042\030\046\063" +
    "\047\034\052\014\054\045\055\015\056\017\057\060\060" +
    "\040\061\050\062\061\063\005\066\056\067\011\070\027" +
    "\071\016\072\052\073\022\074\047\075\101\076\010\077" +
    "\066\100\037\001\002\000\004\011\uffe8\001\002\000\004" +
    "\011\u0107\001\002\000\006\006\111\013\u0105\001\002\000" +
    "\006\011\uff89\014\u0100\001\002\000\076\004\020\006\046" +
    "\010\053\017\025\026\032\037\026\041\065\042\030\046" +
    "\063\047\034\052\014\054\045\055\015\056\017\057\060" +
    "\060\040\061\050\062\061\063\005\066\056\067\011\070" +
    "\027\071\016\072\052\073\022\074\047\075\101\076\010" +
    "\077\066\100\037\001\002\000\004\011\uffe6\001\002\000" +
    "\004\011\uffe9\001\002\000\006\011\uff89\014\u0100\001\002" +
    "\000\004\011\uffe7\001\002\000\076\004\020\006\046\010" +
    "\053\017\025\026\032\037\026\041\065\042\030\046\063" +
    "\047\034\052\014\054\045\055\015\056\017\057\060\060" +
    "\040\061\050\062\061\063\005\066\056\067\011\070\027" +
    "\071\016\072\052\073\022\074\047\075\101\076\010\077" +
    "\066\100\037\001\002\000\010\006\111\011\uffea\014\uffea" +
    "\001\002\000\024\005\uffeb\006\uffeb\007\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\050\uffeb\051\uffeb\001\002\000\004" +
    "\005\u0109\001\002\000\024\005\uff8a\006\uff8a\007\uff8a\011" +
    "\uff8a\012\uff8a\013\uff8a\014\uff8a\050\uff8a\051\uff8a\001\002" +
    "\000\076\004\020\006\046\010\053\017\025\026\032\037" +
    "\026\041\065\042\030\046\063\047\034\052\014\054\045" +
    "\055\015\056\017\057\060\060\040\061\050\062\061\063" +
    "\005\066\056\067\011\070\027\071\016\072\052\073\022" +
    "\074\047\075\101\076\010\077\066\100\037\001\002\000" +
    "\006\006\111\014\u010c\001\002\000\076\004\020\006\046" +
    "\010\053\017\025\026\032\037\026\041\065\042\030\046" +
    "\063\047\034\052\014\054\045\055\015\056\017\057\060" +
    "\060\040\061\050\062\061\063\005\066\056\067\011\070" +
    "\027\071\016\072\052\073\022\074\047\075\101\076\010" +
    "\077\066\100\037\001\002\000\006\006\111\014\u010e\001" +
    "\002\000\076\004\020\006\046\010\053\017\025\026\032" +
    "\037\026\041\065\042\030\046\063\047\034\052\014\054" +
    "\045\055\015\056\017\057\060\060\040\061\050\062\061" +
    "\063\005\066\056\067\011\070\027\071\016\072\052\073" +
    "\022\074\047\075\101\076\010\077\066\100\037\001\002" +
    "\000\006\005\u0110\006\111\001\002\000\066\005\uffad\006" +
    "\uffad\007\uffad\011\uffad\012\uffad\013\uffad\014\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\040\uffad\050\uffad\051\uffad\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\066\002\003\003\006\004\075\005\012\006" +
    "\030\012\035\013\020\014\054\015\032\016\040\026\023" +
    "\031\070\034\056\035\063\036\043\040\072\044\034\045" +
    "\071\046\011\047\050\050\041\051\005\052\067\053\074" +
    "\054\061\055\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\004\262\005\012\006\030" +
    "\012\035\013\020\014\054\015\032\016\040\026\023\031" +
    "\070\034\056\035\063\036\043\040\072\044\034\045\071" +
    "\046\011\047\050\050\041\051\005\052\067\053\074\054" +
    "\061\055\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\006\030\012\355\013\020\014\054\015\032\016\040\026" +
    "\150\031\070\034\056\035\063\036\043\040\072\044\034" +
    "\045\071\046\011\047\050\050\041\051\005\052\067\053" +
    "\074\055\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\020\031" +
    "\070\052\350\053\074\001\001\000\026\013\020\014\054" +
    "\031\070\045\347\046\011\047\050\050\041\051\005\052" +
    "\067\053\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\020\031\070\052\341\053" +
    "\074\001\001\000\002\001\001\000\054\006\030\012\334" +
    "\013\020\014\054\015\032\016\040\026\023\031\070\034" +
    "\056\035\063\036\043\040\072\044\034\045\071\046\011" +
    "\047\050\050\041\051\005\052\067\053\074\055\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\006\030\012\241\013\020\014\054\015\032\016\040\017" +
    "\272\026\023\031\070\034\056\035\063\036\043\040\072" +
    "\044\034\045\071\046\011\047\050\050\041\051\005\052" +
    "\067\053\074\055\042\056\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\003\260\004\075\005\012\006\030\012\035\013\020" +
    "\014\054\015\032\016\040\026\023\031\070\034\056\035" +
    "\063\036\043\040\072\044\034\045\071\046\011\047\050" +
    "\050\041\051\005\052\067\053\074\054\061\055\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\030\012\077\013\020\014\054\015\032\016\040" +
    "\026\023\031\070\034\056\035\063\036\043\040\072\044" +
    "\034\045\071\046\011\047\050\050\041\051\005\052\067" +
    "\053\074\055\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\006\030\012\103\013\020\014\054\015\032" +
    "\016\040\026\023\031\070\032\104\034\056\035\063\036" +
    "\043\040\072\044\034\045\071\046\011\047\050\050\041" +
    "\051\005\052\067\053\074\055\042\056\102\001\001\000" +
    "\002\001\001\000\006\033\107\056\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\006\030\012\114\013" +
    "\020\014\054\015\032\016\040\026\023\031\070\034\056" +
    "\035\063\036\043\040\072\044\034\045\071\046\011\047" +
    "\050\050\041\051\005\052\067\053\074\055\042\001\001" +
    "\000\002\001\001\000\054\006\030\012\112\013\020\014" +
    "\054\015\032\016\040\026\023\031\070\034\056\035\063" +
    "\036\043\040\072\044\034\045\071\046\011\047\050\050" +
    "\041\051\005\052\067\053\074\055\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\115\056\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\013\020\014\054\031\070\046" +
    "\163\047\050\050\041\051\005\052\067\053\074\001\001" +
    "\000\024\013\020\014\054\031\070\046\162\047\050\050" +
    "\041\051\005\052\067\053\074\001\001\000\024\013\020" +
    "\014\054\031\070\046\161\047\050\050\041\051\005\052" +
    "\067\053\074\001\001\000\024\013\020\014\054\031\070" +
    "\046\160\047\050\050\041\051\005\052\067\053\074\001" +
    "\001\000\024\013\020\014\054\031\070\046\157\047\050" +
    "\050\041\051\005\052\067\053\074\001\001\000\024\013" +
    "\020\014\054\031\070\046\127\047\050\050\041\051\005" +
    "\052\067\053\074\001\001\000\054\006\030\012\151\013" +
    "\020\014\054\015\032\016\040\026\150\031\070\034\056" +
    "\035\063\036\043\040\072\044\034\045\071\046\011\047" +
    "\050\050\041\051\005\052\067\053\074\055\042\001\001" +
    "\000\002\001\001\000\022\013\020\014\054\031\070\047" +
    "\147\050\041\051\005\052\067\053\074\001\001\000\022" +
    "\013\020\014\054\031\070\047\132\050\041\051\005\052" +
    "\067\053\074\001\001\000\002\001\001\000\020\013\020" +
    "\014\054\031\070\050\146\051\005\052\067\053\074\001" +
    "\001\000\020\013\020\014\054\031\070\050\135\051\005" +
    "\052\067\053\074\001\001\000\002\001\001\000\016\013" +
    "\020\014\054\031\070\051\145\052\067\053\074\001\001" +
    "\000\016\013\020\014\054\031\070\051\144\052\067\053" +
    "\074\001\001\000\016\013\020\014\054\031\070\051\143" +
    "\052\067\053\074\001\001\000\016\013\020\014\054\031" +
    "\070\051\142\052\067\053\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\006" +
    "\030\012\103\013\020\014\054\015\032\016\040\026\023" +
    "\031\070\032\155\034\056\035\063\036\043\040\072\044" +
    "\034\045\071\046\011\047\050\050\041\051\005\052\067" +
    "\053\074\055\042\056\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\006" +
    "\030\012\103\013\020\014\054\015\032\016\040\026\023" +
    "\031\070\032\165\034\056\035\063\036\043\040\072\044" +
    "\034\045\071\046\011\047\050\050\041\051\005\052\067" +
    "\053\074\055\042\056\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\006\030\012\170\013\020\014\054" +
    "\015\032\016\040\026\023\031\070\034\056\035\063\036" +
    "\043\040\072\044\034\045\071\046\011\047\050\050\041" +
    "\051\005\052\067\053\074\055\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\176\056\175\001\001" +
    "\000\054\006\030\012\174\013\020\014\054\015\032\016" +
    "\040\026\023\031\070\034\056\035\063\036\043\040\072" +
    "\044\034\045\071\046\011\047\050\050\041\051\005\052" +
    "\067\053\074\055\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\201\056\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\204\056\202\001\001\000\002\001\001\000" +
    "\054\006\030\012\212\013\020\014\054\015\032\016\040" +
    "\026\023\031\070\034\056\035\063\036\043\040\072\044" +
    "\034\045\071\046\011\047\050\050\041\051\005\052\067" +
    "\053\074\055\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\006\030\012\211\013\020\014\054\015\032" +
    "\016\040\026\023\031\070\034\056\035\063\036\043\040" +
    "\072\044\034\045\071\046\011\047\050\050\041\051\005" +
    "\052\067\053\074\055\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\216\011\215\056\214\001\001" +
    "\000\002\001\001\000\006\010\226\056\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\006\030\012\221" +
    "\013\020\014\054\015\032\016\040\026\023\031\070\034" +
    "\056\035\063\036\043\040\072\044\034\045\071\046\011" +
    "\047\050\050\041\051\005\052\067\053\074\055\042\001" +
    "\001\000\002\001\001\000\054\006\030\012\223\013\020" +
    "\014\054\015\032\016\040\026\023\031\070\034\056\035" +
    "\063\036\043\040\072\044\034\045\071\046\011\047\050" +
    "\050\041\051\005\052\067\053\074\055\042\001\001\000" +
    "\002\001\001\000\004\011\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\230\056\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\006\030\012\233" +
    "\013\020\014\054\015\032\016\040\026\023\031\070\034" +
    "\056\035\063\036\043\040\072\044\034\045\071\046\011" +
    "\047\050\050\041\051\005\052\067\053\074\055\042\001" +
    "\001\000\002\001\001\000\054\006\030\012\235\013\020" +
    "\014\054\015\032\016\040\026\023\031\070\034\056\035" +
    "\063\036\043\040\072\044\034\045\071\046\011\047\050" +
    "\050\041\051\005\052\067\053\074\055\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\006\030\012\241" +
    "\013\020\014\054\015\032\016\040\017\242\026\023\031" +
    "\070\034\056\035\063\036\043\040\072\044\034\045\071" +
    "\046\011\047\050\050\041\051\005\052\067\053\074\055" +
    "\042\056\240\001\001\000\002\001\001\000\006\020\245" +
    "\056\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\030\012\247\013\020\014\054\015\032\016\040" +
    "\026\023\031\070\034\056\035\063\036\043\040\072\044" +
    "\034\045\071\046\011\047\050\050\041\051\005\052\067" +
    "\053\074\055\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\250\056\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\020\031" +
    "\070\052\254\053\074\001\001\000\002\001\001\000\054" +
    "\006\030\012\256\013\020\014\054\015\032\016\040\026" +
    "\023\031\070\034\056\035\063\036\043\040\072\044\034" +
    "\045\071\046\011\047\050\050\041\051\005\052\067\053" +
    "\074\055\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\262\005\012\006\030\012\035\013\020\014" +
    "\054\015\032\016\040\026\023\031\070\034\056\035\063" +
    "\036\043\040\072\044\034\045\071\046\011\047\050\050" +
    "\041\051\005\052\067\053\074\054\061\055\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\030\012\265\013\020\014\054\015\032\016\040" +
    "\026\023\031\070\034\056\035\063\036\043\040\072\044" +
    "\034\045\071\046\011\047\050\050\041\051\005\052\067" +
    "\053\074\055\042\001\001\000\002\001\001\000\054\006" +
    "\030\012\267\013\020\014\054\015\032\016\040\026\023" +
    "\031\070\034\056\035\063\036\043\040\072\044\034\045" +
    "\071\046\011\047\050\050\041\051\005\052\067\053\074" +
    "\055\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\006\030\012\276\013\020\014\054\015\032\016\040" +
    "\021\275\023\277\026\023\031\070\034\056\035\063\036" +
    "\043\040\072\044\034\045\071\046\011\047\050\050\041" +
    "\051\005\052\067\053\074\055\042\056\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\307\056\310\001\001\000\006\022\302\056\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\006\030\012\305\013\020\014" +
    "\054\015\032\016\040\026\023\031\070\034\056\035\063" +
    "\036\043\040\072\044\034\045\071\046\011\047\050\050" +
    "\041\051\005\052\067\053\074\055\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\006\030\012\276\013" +
    "\020\014\054\015\032\016\040\021\311\026\023\031\070" +
    "\034\056\035\063\036\043\040\072\044\034\045\071\046" +
    "\011\047\050\050\041\051\005\052\067\053\074\055\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\312\056\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\006\030\012\315\013\020\014\054\015\032\016" +
    "\040\026\023\031\070\034\056\035\063\036\043\040\072" +
    "\044\034\045\071\046\011\047\050\050\041\051\005\052" +
    "\067\053\074\055\042\001\001\000\002\001\001\000\054" +
    "\006\030\012\317\013\020\014\054\015\032\016\040\026" +
    "\023\031\070\034\056\035\063\036\043\040\072\044\034" +
    "\045\071\046\011\047\050\050\041\051\005\052\067\053" +
    "\074\055\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\006\030\012\322\013\020\014\054\015\032\016" +
    "\040\026\023\031\070\034\056\035\063\036\043\040\072" +
    "\044\034\045\071\046\011\047\050\050\041\051\005\052" +
    "\067\053\074\055\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\006\030\012\325\013\020\014\054\015" +
    "\032\016\040\026\023\031\070\034\056\035\063\036\043" +
    "\040\072\044\034\045\071\046\011\047\050\050\041\051" +
    "\005\052\067\053\074\055\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\020\014" +
    "\054\031\070\045\333\046\011\047\050\050\041\051\005" +
    "\052\067\053\074\001\001\000\022\013\020\014\054\031" +
    "\070\047\332\050\041\051\005\052\067\053\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\030\012\336\013\020\014\054\015\032\016\040" +
    "\026\023\031\070\034\056\035\063\036\043\040\072\044" +
    "\034\045\071\046\011\047\050\050\041\051\005\052\067" +
    "\053\074\055\042\001\001\000\002\001\001\000\054\006" +
    "\030\012\340\013\020\014\054\015\032\016\040\026\023" +
    "\031\070\034\056\035\063\036\043\040\072\044\034\045" +
    "\071\046\011\047\050\050\041\051\005\052\067\053\074" +
    "\055\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\030\012\343\013\020\014\054\015\032\016\040" +
    "\026\023\031\070\034\056\035\063\036\043\040\072\044" +
    "\034\045\071\046\011\047\050\050\041\051\005\052\067" +
    "\053\074\055\042\001\001\000\002\001\001\000\054\006" +
    "\030\012\345\013\020\014\054\015\032\016\040\026\023" +
    "\031\070\034\056\035\063\036\043\040\072\044\034\045" +
    "\071\046\011\047\050\050\041\051\005\052\067\053\074" +
    "\055\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\006\030\012\352" +
    "\013\020\014\054\015\032\016\040\026\023\031\070\034" +
    "\056\035\063\036\043\040\072\044\034\045\071\046\011" +
    "\047\050\050\041\051\005\052\067\053\074\055\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\357\056\360\001\001\000\054\006\030\012" +
    "\362\013\020\014\054\015\032\016\040\026\023\031\070" +
    "\034\056\035\063\036\043\040\072\044\034\045\071\046" +
    "\011\047\050\050\041\051\005\052\067\053\074\055\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\363\056\360\001\001\000\002\001\001" +
    "\000\054\006\030\012\365\013\020\014\054\015\032\016" +
    "\040\026\023\031\070\034\056\035\063\036\043\040\072" +
    "\044\034\045\071\046\011\047\050\050\041\051\005\052" +
    "\067\053\074\055\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\006\030\012\370\013\020\014\054\015" +
    "\032\016\040\026\023\031\070\034\056\035\063\036\043" +
    "\040\072\044\034\045\071\046\011\047\050\050\041\051" +
    "\005\052\067\053\074\055\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\006\030\012\375\013\020\014" +
    "\054\015\032\016\040\026\023\031\070\034\056\035\063" +
    "\036\043\040\072\041\376\042\374\044\034\045\071\046" +
    "\011\047\050\050\041\051\005\052\067\053\074\055\042" +
    "\056\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\u0101\056\u0100\001\001\000\056" +
    "\006\030\012\375\013\020\014\054\015\032\016\040\026" +
    "\023\031\070\034\056\035\063\036\043\040\072\041\u0102" +
    "\044\034\045\071\046\011\047\050\050\041\051\005\052" +
    "\067\053\074\055\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\u0103\056\u0100\001\001\000\002\001" +
    "\001\000\054\006\030\012\u0105\013\020\014\054\015\032" +
    "\016\040\026\023\031\070\034\056\035\063\036\043\040" +
    "\072\044\034\045\071\046\011\047\050\050\041\051\005" +
    "\052\067\053\074\055\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\006\030\012\u010a\013\020\014\054\015\032\016\040\026" +
    "\023\031\070\034\056\035\063\036\043\040\072\044\034" +
    "\045\071\046\011\047\050\050\041\051\005\052\067\053" +
    "\074\055\042\001\001\000\002\001\001\000\054\006\030" +
    "\012\u010c\013\020\014\054\015\032\016\040\026\023\031" +
    "\070\034\056\035\063\036\043\040\072\044\034\045\071" +
    "\046\011\047\050\050\041\051\005\052\067\053\074\055" +
    "\042\001\001\000\002\001\001\000\054\006\030\012\u010e" +
    "\013\020\014\054\015\032\016\040\026\023\031\070\034" +
    "\056\035\063\036\043\040\072\044\034\045\071\046\011" +
    "\047\050\050\041\051\005\052\067\053\074\055\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxSMPLException(msg, ioe);
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= printStmt 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement p = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtDefinition(v,e);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= DEF VARIABLE expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new StmtDefinition(v,e);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = s; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= logicExp 
            {
              Exp RESULT =null;
		int lxleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lxright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp lx = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lx; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= callExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= ifExp 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= multiExp 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = m; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= caseExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= procedureDef 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpProcedure pd = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pd; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= builtInFn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= readExp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // multiExp ::= LPAREN expression exps RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                el.add(0,e);
                RESULT = new ExpMult(el);
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("multiExp",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exps ::= COMMA expression exps 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                el.add(0,e);
                RESULT = el;
            
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("exps",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exps ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("exps",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // caseExp ::= CASE LBRACE cases RBRACE 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpCase(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseExp",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // case ::= expression COLON expression 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Case(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("case",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cases ::= case casesAux 
            {
              ArrayList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Case> cl = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            cl.add(0,c);
            RESULT = cl;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cases",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cases ::= empty 
            {
              ArrayList<Case> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cases",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // casesAux ::= COMMA case casesAux 
            {
              ArrayList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Case> cl = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
            cl.add(0,c);
            RESULT = cl;
        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("casesAux",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // casesAux ::= empty 
            {
              ArrayList<Case> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("casesAux",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // letExp ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letExp",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binding ::= VARIABLE EQ expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedureDef ::= PROC LPAREN params RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new ExpProcedure(p,e);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureDef",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedureDef ::= PROC VARIABLE expression 
            {
              ExpProcedure RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new ExpProcedure(v,e); 
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureDef",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedureDef ::= PROC LPAREN params DOT VARIABLE RPAREN expression 
            {
              ExpProcedure RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    RESULT = new ExpProcedure(p,v,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureDef",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params ::= VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    pl.add(0,v);
                    RESULT = pl;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // params ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramsAux ::= COMMA VARIABLE paramsAux 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    pl.add(0,v);
                    RESULT = pl;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramsAux",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramsAux ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramsAux",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedureApp ::= VARIABLE LPAREN args RPAREN 
            {
              ExpApplyProc RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> ar = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		                    
                    RESULT =  new ExpApplyProc(v,ar); 
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureApp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedureApp ::= LPAREN procedureDef RPAREN LPAREN args RPAREN 
            {
              ExpApplyProc RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ExpProcedure pd = (ExpProcedure)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> ar = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new ExpApplyProc(pd,ar);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureApp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedureApp ::= procedureApp LPAREN args RPAREN 
            {
              ExpApplyProc RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ExpApplyProc pa = (ExpApplyProc)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> ar = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                    RESULT = new ExpApplyProc(pa,ar);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procedureApp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // args ::= expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    al.add(0,e);
                    RESULT = al;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // args ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // argsAux ::= COMMA expression argsAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                    al.add(0,e);
                    RESULT = al;
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("argsAux",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // argsAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("argsAux",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // callExp ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                    RESULT = new ExpCall(a,b);
                
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("callExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifExp ::= IF expression THEN expression 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpIf(i,t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ifExp ::= IF expression THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpIf(i,t,e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lazyExp ::= LAZY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpLazy(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazyExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logicExp ::= NOT comparison 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpNot(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logicExp ::= logicExp AND comparison 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpAnd(e,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logicExp ::= logicExp OR arithExp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpOr(e,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logicExp ::= comparison 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicExp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparison ::= comparison EQ bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpEQ(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparison ::= comparison GT bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpGT(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comparison ::= comparison LT bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLT(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparison ::= comparison GE bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpGE(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comparison ::= comparison LE bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLE(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparison ::= comparison NEQ bitExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpNEQ(c,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparison ::= bitExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comparison",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bitExp ::= bitExp BITAND arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpBitAnd(b,a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bitExp ::= bitExp BITOR arithExp 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  RESULT = new ExpBitOr(b,a); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bitExp ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitExp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= term MUL comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= term DIV comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= term MOD comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= term POW comp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                RESULT = new ExpPow(t, c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= comp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comp ::= COMP factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpComp(f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comp",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comp ::= concatenation 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("comp",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // concatenation ::= concatenation CONCAT factor 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpConcat(c,f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("concatenation",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // concatenation ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("concatenation",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLValue< ? > n = (SMPLValue< ? >)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpCar(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpCdr(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= SIZE LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpSize(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= SUBSTRING LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                RESULT = new ExpSubstr(a,b,c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= literal 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= procedureApp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ExpApplyProc a = (ExpApplyProc)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= MINUS factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 f.negate();
                             RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(c); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit,10); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= BIN 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit,2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= HEX 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit,16); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= REAL 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT =  new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= BOOLEAN 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new ExpLit(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // builtInFn ::= PAIR QUERY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpIsPair(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // builtInFn ::= EQV QUERY LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpIsEqv(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // builtInFn ::= EQL QUERY LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpIsEql(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // builtInFn ::= expression LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpGet(e,n); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // builtInFn ::= makeCompound 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = m; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtInFn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // makeCompound ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpPair(a,b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // makeCompound ::= LIST LPAREN expList RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpList(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // makeCompound ::= LBRACK expList RBRACK 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ExpList(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // makeCompound ::= LBRACK COLON specList COLON RBRACK 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<Specification> l = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new ExpVector(l); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("makeCompound",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expList ::= expression expListAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                el.add(0,e);
                RESULT = el; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expList ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expList",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expListAux ::= COMMA expression expListAux 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                el.add(0,e);
                RESULT = el; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListAux",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expListAux ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expListAux",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // specification ::= expression spec 
            {
              Specification RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                if(e == null){ 
                    RESULT = new Specification(n); 
                }else{
                    RESULT = new Specification(n,e);
                } 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specification",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // spec ::= COLON expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("spec",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // spec ::= empty 
            {
              Exp RESULT =null;
		 RESULT = null; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("spec",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // specList ::= specification specListAux 
            {
              ArrayList<Specification> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Specification s = (Specification)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Specification> sl = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                sl.add(0,s);
                RESULT = sl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // specList ::= empty 
            {
              ArrayList<Specification> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specList",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // specListAux ::= COMMA specification specListAux 
            {
              ArrayList<Specification> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Specification s = (Specification)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<Specification> sl = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                sl.add(0,s);
                RESULT = sl; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specListAux",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // specListAux ::= empty 
            {
              ArrayList<Specification> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("specListAux",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // printStmt ::= PRINT LPAREN expression RPAREN SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                RESULT = new StmtPrint(e);
              
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStmt",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // printStmt ::= PRINTLN LPAREN expression RPAREN SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		
                RESULT = new StmtPrint(e,true);
              
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("printStmt",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // readExp ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readExp",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // readExp ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpRead(true); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readExp",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",44, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
