package smpl.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives
%%
    
%cup
%public

%class SMPLLexer

%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%eofclose	false

%char
%line

%{
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }
%}

nl = [\n\r]

cc = [\b\f]

ws = {cc}|[\t ]

alpha = [a-zA-Z_]

num = [0-9]

hex = [0-9A-Fa-f]

op = [+-/*\^@]

alphanum = {alpha}|{num}|{op}

%%

//Comments
<YYINITIAL>    "//".* {
	             // skip single line comments (beginning with ;)
	            }
<YYINITIAL>	"/*" [^*] ~"*/" | "/*" "*"+"/" {}

<YYINITIAL>     {ws}    {}

<YYINITIAL>	{nl}	{
                        //skip newline, but reset char counter
			yycolumn = 0;
			}

//Arithmetic Operators
<YYINITIAL>	" + "	{return new Symbol(sym.PLUS);}
<YYINITIAL>	" - "	{return new Symbol(sym.MINUS);}
<YYINITIAL>	" * "	{return new Symbol(sym.MUL);}
<YYINITIAL>	" / "	{return new Symbol(sym.DIV);}
<YYINITIAL>	" % "	{return new Symbol(sym.MOD);}
<YYINITIAL>	" ^ "	{return new Symbol(sym.POW);}

//Bitwise Operators
<YYINITIAL>	" & "	{return new Symbol(sym.BITAND);}
<YYINITIAL>	" | "	{return new Symbol(sym.BITOR);}
<YYINITIAL>	"~ "	{return new Symbol(sym.COMP);}

//Relational Operators
<YYINITIAL>	" = "     {return new Symbol(sym.EQ);}
<YYINITIAL>	" > "	{return new Symbol(sym.GT);}
<YYINITIAL>	" < "	{return new Symbol(sym.LT);}
<YYINITIAL>	" <= "	{return new Symbol(sym.LE);}
<YYINITIAL>	" >= "	{return new Symbol(sym.GE);}
<YYINITIAL>	" != "	{return new Symbol(sym.NEQ);}

//Logical Operators
<YYINITIAL>	"and"	{return new Symbol(sym.AND);}
<YYINITIAL>	"or"	{return new Symbol(sym.OR);}
<YYINITIAL>	"not"	{return new Symbol(sym.NOT);}

//String Concatenation
<YYINITIAL>	" @ "	{return new Symbol(sym.CONCAT);}

<YYINITIAL>	"("	{return new Symbol(sym.LPAREN);}
<YYINITIAL>	")"	{return new Symbol(sym.RPAREN);}
<YYINITIAL>	"{"	{return new Symbol(sym.LBRACE);}
<YYINITIAL>	"}"	{return new Symbol(sym.RBRACE);}
<YYINITIAL>	"["	{return new Symbol(sym.LBRACK);}
<YYINITIAL>	"]"	{return new Symbol(sym.RBRACK);}

<YYINITIAL>	","	{return new Symbol(sym.COMMA);}
<YYINITIAL>	";" 	{return new Symbol(sym.SEMI);}
<YYINITIAL>	":"	{return new Symbol(sym.COLON);}
<YYINITIAL>	"."	{return new Symbol(sym.DOT);}


//Procedure keywords
<YYINITIAL>	"proc"	{return new Symbol(sym.PROC);}
<YYINITIAL>	"call"	{return new Symbol(sym.CALL);}
<YYINITIAL>	"lazy"	{return new Symbol(sym.LAZY);}

//Variable definition
<YYINITIAL>	"def"	{return new Symbol(sym.DEF);}
<YYINITIAL>	" := "	{return new Symbol(sym.ASSIGN);}

//Let keywird
<YYINITIAL>	"let"	{return new Symbol(sym.LET);}

//Control Structures
<YYINITIAL>	"if"	{return new Symbol(sym.IF);}
<YYINITIAL>	"then"	{return new Symbol(sym.THEN);}
<YYINITIAL>	"else"	{return new Symbol(sym.ELSE);}
<YYINITIAL>     "case"  {return new Symbol(sym.CASE);}

//Query tag
<YYINITIAL>     "?"  {return new Symbol(sym.QUERY);}

//Compound Datatype keywords 
<YYINITIAL>     "pair"  {return new Symbol(sym.PAIR);}
<YYINITIAL>     "car"  {return new Symbol(sym.CAR);}
<YYINITIAL>     "cdr"  {return new Symbol(sym.CDR);}
<YYINITIAL>     "list"  {return new Symbol(sym.LIST);}
<YYINITIAL>     "size"  {return new Symbol(sym.SIZE);}

//Object comparison keywords
<YYINITIAL>     "eqv"  {return new Symbol(sym.EQV);}
<YYINITIAL>     "equal"  {return new Symbol(sym.EQL);}

//String operation keywords
<YYINITIAL>     "substr"  {return new Symbol(sym.SUBSTRING);}

//Console Interaction keywords
<YYINITIAL>	"print"	{return new Symbol(sym.PRINT);}
<YYINITIAL>	"println"  {return new Symbol(sym.PRINTLN);}
 
<YYINITIAL>	"read"	  {return new Symbol(sym.READ);}
<YYINITIAL>	"readint" {return new Symbol(sym.READINT);}

//Decimal, Hex & Binary integers
<YYINITIAL>    [-]?{num}+ {return new Symbol(sym.INTEGER, new Integer(yytext()));}
<YYINITIAL>    #x{hex}+ {return new Symbol(sym.INTEGER, Integer.parseInt(yytext().substring(2),16));}
<YYINITIAL>    #b[0-1]+ {return new Symbol(sym.INTEGER, Integer.parseInt(yytext().substring(2),2));}

//Floating Point Numbers
<YYINITIAL>    [-]?{num}*\.{num}+ {return new Symbol(sym.REAL, new Double(yytext()));}
<YYINITIAL>    [-]?{num}+\.{num}* {return new Symbol(sym.REAL, new Double(yytext()));}

//Character Literals
<YYINITIAL>    #c.    {return new Symbol(sym.CHAR, new Character(yytext().charAt(2)));}
<YYINITIAL>    #u{hex}+   {return new Symbol(sym.CHAR, Character.toChars(Integer.parseInt(yytext().substring(2))));}	

//String Literals
<YYINITIAL>    \"(.[^\"]*)\"   {return new Symbol(sym.STRING, yytext().substring(1,yytext().length()-1));}
    
//Boolean literals
<YYINITIAL>    #t   {return new Symbol(sym.BOOLEAN,new Boolean(true));}
<YYINITIAL>    #f   {return new Symbol(sym.BOOLEAN,new Boolean(false));}

//Empty List
<YYINITIAL>    #e   {return new Symbol(sym.NIL);}

//Variable
<YYINITIAL>    ({alpha}|{num})({alphanum}|#)* {return new Symbol(sym.VARIABLE, yytext());}